

================================================================
== Vivado HLS Report for 'axis_timestamper'
================================================================
* Date:           Thu Jul 14 17:19:48 2022

* Version:        2018.3 (Build 2405991 on Thu Dec 06 23:56:15 MST 2018)
* Project:        ProjAXISTimestamper
* Solution:       SolutionX
* Product family: kintexu
* Target device:  xcku040-ffva1156-2-e


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |   3.30|     2.030|        0.30|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+----------+
    |  Latency  |  Interval | Pipeline |
    | min | max | min | max |   Type   |
    +-----+-----+-----+-----+----------+
    |    0|    0|    1|    1| function |
    +-----+-----+-----+-----+----------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 0
IsPipeline: 1
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 1


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 1
* Pipeline : 1
  Pipeline-0 : II = 1, D = 1, States = { 1 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 2.03>
ST_1 : Operation 2 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i64* %data_in_V_data_V), !map !46"   --->   Operation 2 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 3 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i8* %data_in_V_keep_V), !map !50"   --->   Operation 3 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 4 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1* %data_in_V_last_V), !map !54"   --->   Operation 4 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 5 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i64* %data_out_V_data_V), !map !58"   --->   Operation 5 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i8* %data_out_V_keep_V), !map !62"   --->   Operation 6 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1* %data_out_V_last_V), !map !66"   --->   Operation 7 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1 %start_V), !map !70"   --->   Operation 8 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecTopModule([17 x i8]* @axis_timestamper_str) nounwind"   --->   Operation 9 'spectopmodule' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%start_V_read = call i1 @_ssdm_op_Read.ap_none.i1(i1 %start_V)"   --->   Operation 10 'read' 'start_V_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecPipeline(i32 -1, i32 1, i32 1, i32 0, [1 x i8]* @p_str) nounwind" [axis_timestamper.cpp:22]   --->   Operation 11 'specpipeline' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32 0, [13 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str) nounwind" [axis_timestamper.cpp:23]   --->   Operation 12 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i64* %data_in_V_data_V, i8* %data_in_V_keep_V, i1* %data_in_V_last_V, [5 x i8]* @p_str2, i32 1, i32 1, [5 x i8]* @p_str3, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str) nounwind" [axis_timestamper.cpp:24]   --->   Operation 13 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i64* %data_out_V_data_V, i8* %data_out_V_keep_V, i1* %data_out_V_last_V, [5 x i8]* @p_str2, i32 1, i32 1, [5 x i8]* @p_str3, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str) nounwind" [axis_timestamper.cpp:25]   --->   Operation 14 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i1 %start_V, [8 x i8]* @p_str4, i32 0, i32 0, [1 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str) nounwind" [axis_timestamper.cpp:26]   --->   Operation 15 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%t_V = load i64* @timestamp_V, align 8" [axis_timestamper.cpp:36]   --->   Operation 16 'load' 't_V' <Predicate = (start_V_read)> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (1.57ns)   --->   "%tmp = add i64 %t_V, 1" [axis_timestamper.cpp:36]   --->   Operation 17 'add' 'tmp' <Predicate = (start_V_read)> <Delay = 1.57> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.57> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 18 [1/1] (0.45ns)   --->   "%out_word_data_V = select i1 %start_V_read, i64 %tmp, i64 0" [axis_timestamper.cpp:36]   --->   Operation 18 'select' 'out_word_data_V' <Predicate = true> <Delay = 0.45> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.45> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "store i64 %out_word_data_V, i64* @timestamp_V, align 8" [axis_timestamper.cpp:34]   --->   Operation 19 'store' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%tmp_1 = call i1 @_ssdm_op_NbReadReq.axis.i64P.i8P.i1P(i64* %data_in_V_data_V, i8* %data_in_V_keep_V, i1* %data_in_V_last_V, i32 1)" [axis_timestamper.cpp:39]   --->   Operation 20 'nbreadreq' 'tmp_1' <Predicate = true> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "br i1 %tmp_1, label %0, label %._crit_edge95" [axis_timestamper.cpp:39]   --->   Operation 21 'br' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%tmp_2 = call i1 @_ssdm_op_NbWriteReq.axis.i64P.i8P.i1P(i64* %data_out_V_data_V, i8* %data_out_V_keep_V, i1* %data_out_V_last_V, i32 1)" [axis_timestamper.cpp:39]   --->   Operation 22 'nbwritereq' 'tmp_2' <Predicate = (tmp_1)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "br i1 %tmp_2, label %1, label %._crit_edge95" [axis_timestamper.cpp:39]   --->   Operation 23 'br' <Predicate = (tmp_1)> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%timestamp_flag_V_loa = load i1* @timestamp_flag_V, align 1" [axis_timestamper.cpp:42]   --->   Operation 24 'load' 'timestamp_flag_V_loa' <Predicate = (tmp_1 & tmp_2)> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.00ns)   --->   "br i1 %timestamp_flag_V_loa, label %2, label %3" [axis_timestamper.cpp:42]   --->   Operation 25 'br' <Predicate = (tmp_1 & tmp_2)> <Delay = 0.00>
ST_1 : Operation 26 [1/1] (0.00ns)   --->   "%empty = call { i64, i8, i1 } @_ssdm_op_Read.axis.volatile.i64P.i8P.i1P(i64* %data_in_V_data_V, i8* %data_in_V_keep_V, i1* %data_in_V_last_V)" [axis_timestamper.cpp:51]   --->   Operation 26 'read' 'empty' <Predicate = (tmp_1 & tmp_2 & !timestamp_flag_V_loa)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_1 : Operation 27 [1/1] (0.00ns)   --->   "%tmp_data_V_1 = extractvalue { i64, i8, i1 } %empty, 0" [axis_timestamper.cpp:51]   --->   Operation 27 'extractvalue' 'tmp_data_V_1' <Predicate = (tmp_1 & tmp_2 & !timestamp_flag_V_loa)> <Delay = 0.00>
ST_1 : Operation 28 [1/1] (0.00ns)   --->   "%tmp_keep_V = extractvalue { i64, i8, i1 } %empty, 1" [axis_timestamper.cpp:51]   --->   Operation 28 'extractvalue' 'tmp_keep_V' <Predicate = (tmp_1 & tmp_2 & !timestamp_flag_V_loa)> <Delay = 0.00>
ST_1 : Operation 29 [1/1] (0.00ns)   --->   "%tmp_last_V = extractvalue { i64, i8, i1 } %empty, 2" [axis_timestamper.cpp:51]   --->   Operation 29 'extractvalue' 'tmp_last_V' <Predicate = (tmp_1 & tmp_2 & !timestamp_flag_V_loa)> <Delay = 0.00>
ST_1 : Operation 30 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.axis.volatile.i64P.i8P.i1P(i64* %data_out_V_data_V, i8* %data_out_V_keep_V, i1* %data_out_V_last_V, i64 %tmp_data_V_1, i8 %tmp_keep_V, i1 %tmp_last_V)" [axis_timestamper.cpp:52]   --->   Operation 30 'write' <Predicate = (tmp_1 & tmp_2 & !timestamp_flag_V_loa)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_1 : Operation 31 [1/1] (0.00ns)   --->   "br i1 %tmp_last_V, label %4, label %._crit_edge97" [axis_timestamper.cpp:54]   --->   Operation 31 'br' <Predicate = (tmp_1 & tmp_2 & !timestamp_flag_V_loa)> <Delay = 0.00>
ST_1 : Operation 32 [1/1] (0.83ns)   --->   "store i1 true, i1* @timestamp_flag_V, align 1" [axis_timestamper.cpp:55]   --->   Operation 32 'store' <Predicate = (tmp_1 & tmp_2 & !timestamp_flag_V_loa & tmp_last_V)> <Delay = 0.83>
ST_1 : Operation 33 [1/1] (0.00ns)   --->   "br label %._crit_edge97" [axis_timestamper.cpp:55]   --->   Operation 33 'br' <Predicate = (tmp_1 & tmp_2 & !timestamp_flag_V_loa & tmp_last_V)> <Delay = 0.00>
ST_1 : Operation 34 [1/1] (0.00ns)   --->   "br label %5"   --->   Operation 34 'br' <Predicate = (tmp_1 & tmp_2 & !timestamp_flag_V_loa)> <Delay = 0.00>
ST_1 : Operation 35 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.axis.volatile.i64P.i8P.i1P(i64* %data_out_V_data_V, i8* %data_out_V_keep_V, i1* %data_out_V_last_V, i64 %out_word_data_V, i8 -1, i1 false)" [axis_timestamper.cpp:45]   --->   Operation 35 'write' <Predicate = (tmp_1 & tmp_2 & timestamp_flag_V_loa)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_1 : Operation 36 [1/1] (0.83ns)   --->   "store i1 false, i1* @timestamp_flag_V, align 1" [axis_timestamper.cpp:47]   --->   Operation 36 'store' <Predicate = (tmp_1 & tmp_2 & timestamp_flag_V_loa)> <Delay = 0.83>
ST_1 : Operation 37 [1/1] (0.00ns)   --->   "br label %5" [axis_timestamper.cpp:48]   --->   Operation 37 'br' <Predicate = (tmp_1 & tmp_2 & timestamp_flag_V_loa)> <Delay = 0.00>
ST_1 : Operation 38 [1/1] (0.00ns)   --->   "br label %._crit_edge95" [axis_timestamper.cpp:58]   --->   Operation 38 'br' <Predicate = (tmp_1 & tmp_2)> <Delay = 0.00>
ST_1 : Operation 39 [1/1] (0.00ns)   --->   "ret void" [axis_timestamper.cpp:59]   --->   Operation 39 'ret' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 3.3ns, clock uncertainty: 0.3ns.

 <State 1>: 2.03ns
The critical path consists of the following:
	'load' operation ('t.V', axis_timestamper.cpp:36) on static variable 'timestamp_V' [24]  (0 ns)
	'add' operation ('tmp', axis_timestamper.cpp:36) [25]  (1.57 ns)
	'select' operation ('out_word.data.V', axis_timestamper.cpp:36) [26]  (0.457 ns)
	axis write on port 'data_out_V_data_V' (axis_timestamper.cpp:45) [49]  (0 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
