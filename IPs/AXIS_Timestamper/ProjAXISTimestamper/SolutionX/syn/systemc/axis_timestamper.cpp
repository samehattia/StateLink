// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "axis_timestamper.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic axis_timestamper::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic axis_timestamper::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> axis_timestamper::ap_ST_fsm_state1 = "1";
const sc_lv<64> axis_timestamper::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<1> axis_timestamper::ap_const_lv1_1 = "1";
const bool axis_timestamper::ap_const_boolean_1 = true;
const sc_lv<32> axis_timestamper::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> axis_timestamper::ap_const_lv1_0 = "0";
const sc_lv<8> axis_timestamper::ap_const_lv8_FF = "11111111";
const sc_lv<64> axis_timestamper::ap_const_lv64_1 = "1";

axis_timestamper::axis_timestamper(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( data_in_TVALID );
    sensitive << ( ap_predicate_op26_read_state1 );

    SC_METHOD(thread_ap_block_state1_io);
    sensitive << ( data_out_TREADY );
    sensitive << ( ap_predicate_op30_write_state1 );
    sensitive << ( ap_predicate_op35_write_state1 );

    SC_METHOD(thread_ap_condition_125);
    sensitive << ( data_in_TVALID );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_1_nbreadreq_fu_70_p5 );
    sensitive << ( tmp_2_nbwritereq_fu_82_p5 );
    sensitive << ( ap_predicate_op26_read_state1 );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_ap_condition_87);
    sensitive << ( data_in_TVALID );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_predicate_op26_read_state1 );

    SC_METHOD(thread_ap_predicate_op26_read_state1);
    sensitive << ( timestamp_flag_V );
    sensitive << ( tmp_1_nbreadreq_fu_70_p5 );
    sensitive << ( tmp_2_nbwritereq_fu_82_p5 );

    SC_METHOD(thread_ap_predicate_op30_write_state1);
    sensitive << ( timestamp_flag_V );
    sensitive << ( tmp_1_nbreadreq_fu_70_p5 );
    sensitive << ( tmp_2_nbwritereq_fu_82_p5 );

    SC_METHOD(thread_ap_predicate_op35_write_state1);
    sensitive << ( timestamp_flag_V );
    sensitive << ( tmp_1_nbreadreq_fu_70_p5 );
    sensitive << ( tmp_2_nbwritereq_fu_82_p5 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_data_in_TDATA_blk_n);
    sensitive << ( data_in_TVALID );
    sensitive << ( timestamp_flag_V );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_1_nbreadreq_fu_70_p5 );
    sensitive << ( tmp_2_nbwritereq_fu_82_p5 );

    SC_METHOD(thread_data_in_TREADY);
    sensitive << ( data_in_TVALID );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_predicate_op26_read_state1 );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_data_out_TDATA);
    sensitive << ( data_in_TDATA );
    sensitive << ( out_word_data_V_fu_129_p3 );
    sensitive << ( ap_predicate_op30_write_state1 );
    sensitive << ( ap_predicate_op35_write_state1 );
    sensitive << ( ap_condition_87 );

    SC_METHOD(thread_data_out_TDATA_blk_n);
    sensitive << ( data_out_TREADY );
    sensitive << ( timestamp_flag_V );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_1_nbreadreq_fu_70_p5 );
    sensitive << ( tmp_2_nbwritereq_fu_82_p5 );

    SC_METHOD(thread_data_out_TKEEP);
    sensitive << ( data_in_TKEEP );
    sensitive << ( ap_predicate_op30_write_state1 );
    sensitive << ( ap_predicate_op35_write_state1 );
    sensitive << ( ap_condition_87 );

    SC_METHOD(thread_data_out_TLAST);
    sensitive << ( data_in_TLAST );
    sensitive << ( ap_predicate_op30_write_state1 );
    sensitive << ( ap_predicate_op35_write_state1 );
    sensitive << ( ap_condition_87 );

    SC_METHOD(thread_data_out_TVALID);
    sensitive << ( data_in_TVALID );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_predicate_op26_read_state1 );
    sensitive << ( ap_predicate_op30_write_state1 );
    sensitive << ( ap_predicate_op35_write_state1 );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_out_word_data_V_fu_129_p3);
    sensitive << ( start_V );
    sensitive << ( tmp_fu_123_p2 );

    SC_METHOD(thread_tmp_1_nbreadreq_fu_70_p5);
    sensitive << ( data_in_TVALID );

    SC_METHOD(thread_tmp_2_nbwritereq_fu_82_p5);
    sensitive << ( data_out_TREADY );

    SC_METHOD(thread_tmp_fu_123_p2);
    sensitive << ( timestamp_V );

    SC_METHOD(thread_tmp_last_V_fu_158_p1);
    sensitive << ( data_in_TLAST );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( data_in_TVALID );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_predicate_op26_read_state1 );
    sensitive << ( ap_block_state1_io );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    timestamp_V = "0000000000000000000000000000000000000000000000000000000000000000";
    timestamp_flag_V = "1";
    ap_CS_fsm = "1";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "axis_timestamper_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, data_in_TDATA, "(port)data_in_TDATA");
    sc_trace(mVcdFile, data_in_TVALID, "(port)data_in_TVALID");
    sc_trace(mVcdFile, data_in_TREADY, "(port)data_in_TREADY");
    sc_trace(mVcdFile, data_in_TKEEP, "(port)data_in_TKEEP");
    sc_trace(mVcdFile, data_in_TLAST, "(port)data_in_TLAST");
    sc_trace(mVcdFile, data_out_TDATA, "(port)data_out_TDATA");
    sc_trace(mVcdFile, data_out_TVALID, "(port)data_out_TVALID");
    sc_trace(mVcdFile, data_out_TREADY, "(port)data_out_TREADY");
    sc_trace(mVcdFile, data_out_TKEEP, "(port)data_out_TKEEP");
    sc_trace(mVcdFile, data_out_TLAST, "(port)data_out_TLAST");
    sc_trace(mVcdFile, start_V, "(port)start_V");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, timestamp_V, "timestamp_V");
    sc_trace(mVcdFile, timestamp_flag_V, "timestamp_flag_V");
    sc_trace(mVcdFile, data_in_TDATA_blk_n, "data_in_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, tmp_1_nbreadreq_fu_70_p5, "tmp_1_nbreadreq_fu_70_p5");
    sc_trace(mVcdFile, tmp_2_nbwritereq_fu_82_p5, "tmp_2_nbwritereq_fu_82_p5");
    sc_trace(mVcdFile, data_out_TDATA_blk_n, "data_out_TDATA_blk_n");
    sc_trace(mVcdFile, out_word_data_V_fu_129_p3, "out_word_data_V_fu_129_p3");
    sc_trace(mVcdFile, ap_predicate_op26_read_state1, "ap_predicate_op26_read_state1");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_predicate_op30_write_state1, "ap_predicate_op30_write_state1");
    sc_trace(mVcdFile, ap_predicate_op35_write_state1, "ap_predicate_op35_write_state1");
    sc_trace(mVcdFile, ap_block_state1_io, "ap_block_state1_io");
    sc_trace(mVcdFile, tmp_last_V_fu_158_p1, "tmp_last_V_fu_158_p1");
    sc_trace(mVcdFile, tmp_fu_123_p2, "tmp_fu_123_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_condition_87, "ap_condition_87");
    sc_trace(mVcdFile, ap_condition_125, "ap_condition_125");
#endif

    }
    mHdltvinHandle.open("axis_timestamper.hdltvin.dat");
    mHdltvoutHandle.open("axis_timestamper.hdltvout.dat");
}

axis_timestamper::~axis_timestamper() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void axis_timestamper::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_condition_125.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, timestamp_flag_V.read())) {
            timestamp_flag_V = ap_const_lv1_0;
        } else if ((esl_seteq<1,1,1>(timestamp_flag_V.read(), ap_const_lv1_0) && 
                    esl_seteq<1,1,1>(ap_const_lv1_1, tmp_last_V_fu_158_p1.read()))) {
            timestamp_flag_V = ap_const_lv1_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !((esl_seteq<1,1,1>(ap_const_logic_0, data_in_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op26_read_state1.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        timestamp_V = out_word_data_V_fu_129_p3.read();
    }
}

void axis_timestamper::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void axis_timestamper::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, data_in_TVALID.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op26_read_state1.read()));
}

void axis_timestamper::thread_ap_block_state1_io() {
    ap_block_state1_io = ((esl_seteq<1,1,1>(ap_const_logic_0, data_out_TREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op30_write_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, data_out_TREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op35_write_state1.read())));
}

void axis_timestamper::thread_ap_condition_125() {
    ap_condition_125 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_nbreadreq_fu_70_p5.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_nbwritereq_fu_82_p5.read()) && !((esl_seteq<1,1,1>(ap_const_logic_0, data_in_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op26_read_state1.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())));
}

void axis_timestamper::thread_ap_condition_87() {
    ap_condition_87 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, data_in_TVALID.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op26_read_state1.read())));
}

void axis_timestamper::thread_ap_predicate_op26_read_state1() {
    ap_predicate_op26_read_state1 = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_nbreadreq_fu_70_p5.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_nbwritereq_fu_82_p5.read()) && esl_seteq<1,1,1>(timestamp_flag_V.read(), ap_const_lv1_0));
}

void axis_timestamper::thread_ap_predicate_op30_write_state1() {
    ap_predicate_op30_write_state1 = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_nbreadreq_fu_70_p5.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_nbwritereq_fu_82_p5.read()) && esl_seteq<1,1,1>(timestamp_flag_V.read(), ap_const_lv1_0));
}

void axis_timestamper::thread_ap_predicate_op35_write_state1() {
    ap_predicate_op35_write_state1 = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_nbreadreq_fu_70_p5.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_nbwritereq_fu_82_p5.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, timestamp_flag_V.read()));
}

void axis_timestamper::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void axis_timestamper::thread_data_in_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_nbreadreq_fu_70_p5.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_nbwritereq_fu_82_p5.read()) && 
         esl_seteq<1,1,1>(timestamp_flag_V.read(), ap_const_lv1_0))) {
        data_in_TDATA_blk_n = data_in_TVALID.read();
    } else {
        data_in_TDATA_blk_n = ap_const_logic_1;
    }
}

void axis_timestamper::thread_data_in_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op26_read_state1.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_0, data_in_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op26_read_state1.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        data_in_TREADY = ap_const_logic_1;
    } else {
        data_in_TREADY = ap_const_logic_0;
    }
}

void axis_timestamper::thread_data_out_TDATA() {
    if (esl_seteq<1,1,1>(ap_condition_87.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op35_write_state1.read())) {
            data_out_TDATA = out_word_data_V_fu_129_p3.read();
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op30_write_state1.read())) {
            data_out_TDATA = data_in_TDATA.read();
        } else {
            data_out_TDATA = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        data_out_TDATA = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void axis_timestamper::thread_data_out_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_nbreadreq_fu_70_p5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_nbwritereq_fu_82_p5.read()) && 
          esl_seteq<1,1,1>(timestamp_flag_V.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_nbreadreq_fu_70_p5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_nbwritereq_fu_82_p5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, timestamp_flag_V.read())))) {
        data_out_TDATA_blk_n = data_out_TREADY.read();
    } else {
        data_out_TDATA_blk_n = ap_const_logic_1;
    }
}

void axis_timestamper::thread_data_out_TKEEP() {
    if (esl_seteq<1,1,1>(ap_condition_87.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op35_write_state1.read())) {
            data_out_TKEEP = ap_const_lv8_FF;
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op30_write_state1.read())) {
            data_out_TKEEP = data_in_TKEEP.read();
        } else {
            data_out_TKEEP =  (sc_lv<8>) ("XXXXXXXX");
        }
    } else {
        data_out_TKEEP =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void axis_timestamper::thread_data_out_TLAST() {
    if (esl_seteq<1,1,1>(ap_condition_87.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op35_write_state1.read())) {
            data_out_TLAST = ap_const_lv1_0;
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op30_write_state1.read())) {
            data_out_TLAST = data_in_TLAST.read();
        } else {
            data_out_TLAST =  (sc_lv<1>) ("X");
        }
    } else {
        data_out_TLAST =  (sc_lv<1>) ("X");
    }
}

void axis_timestamper::thread_data_out_TVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op30_write_state1.read()) && 
          !((esl_seteq<1,1,1>(ap_const_logic_0, data_in_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op26_read_state1.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op35_write_state1.read()) && 
          !((esl_seteq<1,1,1>(ap_const_logic_0, data_in_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op26_read_state1.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read()))))) {
        data_out_TVALID = ap_const_logic_1;
    } else {
        data_out_TVALID = ap_const_logic_0;
    }
}

void axis_timestamper::thread_out_word_data_V_fu_129_p3() {
    out_word_data_V_fu_129_p3 = (!start_V.read()[0].is_01())? sc_lv<64>(): ((start_V.read()[0].to_bool())? tmp_fu_123_p2.read(): ap_const_lv64_0);
}

void axis_timestamper::thread_tmp_1_nbreadreq_fu_70_p5() {
    tmp_1_nbreadreq_fu_70_p5 =  (sc_lv<1>) ((data_in_TVALID.read()));
}

void axis_timestamper::thread_tmp_2_nbwritereq_fu_82_p5() {
    tmp_2_nbwritereq_fu_82_p5 =  (sc_lv<1>) (data_out_TREADY.read());
}

void axis_timestamper::thread_tmp_fu_123_p2() {
    tmp_fu_123_p2 = (!timestamp_V.read().is_01() || !ap_const_lv64_1.is_01())? sc_lv<64>(): (sc_biguint<64>(timestamp_V.read()) + sc_biguint<64>(ap_const_lv64_1));
}

void axis_timestamper::thread_tmp_last_V_fu_158_p1() {
    tmp_last_V_fu_158_p1 = data_in_TLAST.read();
}

void axis_timestamper::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state1;
break;
        default : 
            ap_NS_fsm =  (sc_lv<1>) ("X");
            break;
    }
}

void axis_timestamper::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data_in_TDATA\" :  \"" << data_in_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data_in_TVALID\" :  \"" << data_in_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"data_in_TREADY\" :  \"" << data_in_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data_in_TKEEP\" :  \"" << data_in_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data_in_TLAST\" :  \"" << data_in_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_out_TDATA\" :  \"" << data_out_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_out_TVALID\" :  \"" << data_out_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data_out_TREADY\" :  \"" << data_out_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_out_TKEEP\" :  \"" << data_out_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_out_TLAST\" :  \"" << data_out_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"start_V\" :  \"" << start_V.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

