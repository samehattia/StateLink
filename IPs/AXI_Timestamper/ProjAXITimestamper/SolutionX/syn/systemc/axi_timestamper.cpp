// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "axi_timestamper.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic axi_timestamper::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic axi_timestamper::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> axi_timestamper::ap_ST_fsm_state1 = "1";
const sc_lv<32> axi_timestamper::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> axi_timestamper::ap_const_lv1_0 = "0";
const int axi_timestamper::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<1> axi_timestamper::ap_const_lv1_1 = "1";
const sc_lv<32> axi_timestamper::ap_const_lv32_1 = "1";
const bool axi_timestamper::ap_const_boolean_1 = true;

axi_timestamper::axi_timestamper(sc_module_name name) : sc_module(name), mVcdFile(0) {
    axi_timestamper_timestamp_s_axi_U = new axi_timestamper_timestamp_s_axi<C_S_AXI_TIMESTAMP_ADDR_WIDTH,C_S_AXI_TIMESTAMP_DATA_WIDTH>("axi_timestamper_timestamp_s_axi_U");
    axi_timestamper_timestamp_s_axi_U->AWVALID(s_axi_timestamp_AWVALID);
    axi_timestamper_timestamp_s_axi_U->AWREADY(s_axi_timestamp_AWREADY);
    axi_timestamper_timestamp_s_axi_U->AWADDR(s_axi_timestamp_AWADDR);
    axi_timestamper_timestamp_s_axi_U->WVALID(s_axi_timestamp_WVALID);
    axi_timestamper_timestamp_s_axi_U->WREADY(s_axi_timestamp_WREADY);
    axi_timestamper_timestamp_s_axi_U->WDATA(s_axi_timestamp_WDATA);
    axi_timestamper_timestamp_s_axi_U->WSTRB(s_axi_timestamp_WSTRB);
    axi_timestamper_timestamp_s_axi_U->ARVALID(s_axi_timestamp_ARVALID);
    axi_timestamper_timestamp_s_axi_U->ARREADY(s_axi_timestamp_ARREADY);
    axi_timestamper_timestamp_s_axi_U->ARADDR(s_axi_timestamp_ARADDR);
    axi_timestamper_timestamp_s_axi_U->RVALID(s_axi_timestamp_RVALID);
    axi_timestamper_timestamp_s_axi_U->RREADY(s_axi_timestamp_RREADY);
    axi_timestamper_timestamp_s_axi_U->RDATA(s_axi_timestamp_RDATA);
    axi_timestamper_timestamp_s_axi_U->RRESP(s_axi_timestamp_RRESP);
    axi_timestamper_timestamp_s_axi_U->BVALID(s_axi_timestamp_BVALID);
    axi_timestamper_timestamp_s_axi_U->BREADY(s_axi_timestamp_BREADY);
    axi_timestamper_timestamp_s_axi_U->BRESP(s_axi_timestamp_BRESP);
    axi_timestamper_timestamp_s_axi_U->ACLK(ap_clk);
    axi_timestamper_timestamp_s_axi_U->ARESET(ap_rst_n_inv);
    axi_timestamper_timestamp_s_axi_U->ACLK_EN(ap_var_for_const0);
    axi_timestamper_timestamp_s_axi_U->write_timestamp_V(local_write_timestam);
    axi_timestamper_timestamp_s_axi_U->write_timestamp_V_ap_vld(write_timestamp_V_ap_vld);
    axi_timestamper_timestamp_s_axi_U->read_timestamp_V(local_read_timestamp);
    axi_timestamper_timestamp_s_axi_U->read_timestamp_V_ap_vld(read_timestamp_V_ap_vld);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_phi_mux_read_latency_counter_2_phi_fu_143_p6);
    sensitive << ( read_latency_counter );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ret_V_fu_174_p2 );
    sensitive << ( read_latency_counter_1_fu_189_p2 );
    sensitive << ( read_count_flag_V_lo_load_fu_185_p1 );

    SC_METHOD(thread_ap_phi_mux_write_latency_counte_1_phi_fu_155_p6);
    sensitive << ( write_latency_counte );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ret_V_2_fu_238_p2 );
    sensitive << ( tmp_4_fu_253_p2 );
    sensitive << ( write_count_flag_V_l_load_fu_249_p1 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_read_count_flag_V_lo_load_fu_185_p1);
    sensitive << ( read_count_flag_V );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ret_V_fu_174_p2 );

    SC_METHOD(thread_read_latency_counter_1_fu_189_p2);
    sensitive << ( read_latency_counter );

    SC_METHOD(thread_read_timestamp_V_ap_vld);
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ret_V_1_fu_208_p2);
    sensitive << ( rvalid_V );
    sensitive << ( rready_V );

    SC_METHOD(thread_ret_V_2_fu_238_p2);
    sensitive << ( wvalid_V );
    sensitive << ( tmp_fu_232_p2 );

    SC_METHOD(thread_ret_V_3_fu_272_p2);
    sensitive << ( bvalid_V );
    sensitive << ( bready_V );

    SC_METHOD(thread_ret_V_fu_174_p2);
    sensitive << ( arvalid_V );
    sensitive << ( arready_V );

    SC_METHOD(thread_tmp_4_fu_253_p2);
    sensitive << ( write_latency_counte );

    SC_METHOD(thread_tmp_fu_232_p2);
    sensitive << ( wready_V );
    sensitive << ( wlast_V );

    SC_METHOD(thread_write_count_flag_V_l_load_fu_249_p1);
    sensitive << ( write_count_flag_V );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ret_V_2_fu_238_p2 );

    SC_METHOD(thread_write_timestamp_V_ap_vld);
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    local_read_timestamp = "00000000000000000000000000000000";
    local_write_timestam = "00000000000000000000000000000000";
    read_latency_counter = "00000000000000000000000000000000";
    read_count_flag_V = "0";
    write_latency_counte = "00000000000000000000000000000000";
    write_count_flag_V = "0";
    ap_CS_fsm = "1";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "axi_timestamper_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, arvalid_V, "(port)arvalid_V");
    sc_trace(mVcdFile, arready_V, "(port)arready_V");
    sc_trace(mVcdFile, rvalid_V, "(port)rvalid_V");
    sc_trace(mVcdFile, rready_V, "(port)rready_V");
    sc_trace(mVcdFile, wvalid_V, "(port)wvalid_V");
    sc_trace(mVcdFile, wready_V, "(port)wready_V");
    sc_trace(mVcdFile, wlast_V, "(port)wlast_V");
    sc_trace(mVcdFile, bvalid_V, "(port)bvalid_V");
    sc_trace(mVcdFile, bready_V, "(port)bready_V");
    sc_trace(mVcdFile, s_axi_timestamp_AWVALID, "(port)s_axi_timestamp_AWVALID");
    sc_trace(mVcdFile, s_axi_timestamp_AWREADY, "(port)s_axi_timestamp_AWREADY");
    sc_trace(mVcdFile, s_axi_timestamp_AWADDR, "(port)s_axi_timestamp_AWADDR");
    sc_trace(mVcdFile, s_axi_timestamp_WVALID, "(port)s_axi_timestamp_WVALID");
    sc_trace(mVcdFile, s_axi_timestamp_WREADY, "(port)s_axi_timestamp_WREADY");
    sc_trace(mVcdFile, s_axi_timestamp_WDATA, "(port)s_axi_timestamp_WDATA");
    sc_trace(mVcdFile, s_axi_timestamp_WSTRB, "(port)s_axi_timestamp_WSTRB");
    sc_trace(mVcdFile, s_axi_timestamp_ARVALID, "(port)s_axi_timestamp_ARVALID");
    sc_trace(mVcdFile, s_axi_timestamp_ARREADY, "(port)s_axi_timestamp_ARREADY");
    sc_trace(mVcdFile, s_axi_timestamp_ARADDR, "(port)s_axi_timestamp_ARADDR");
    sc_trace(mVcdFile, s_axi_timestamp_RVALID, "(port)s_axi_timestamp_RVALID");
    sc_trace(mVcdFile, s_axi_timestamp_RREADY, "(port)s_axi_timestamp_RREADY");
    sc_trace(mVcdFile, s_axi_timestamp_RDATA, "(port)s_axi_timestamp_RDATA");
    sc_trace(mVcdFile, s_axi_timestamp_RRESP, "(port)s_axi_timestamp_RRESP");
    sc_trace(mVcdFile, s_axi_timestamp_BVALID, "(port)s_axi_timestamp_BVALID");
    sc_trace(mVcdFile, s_axi_timestamp_BREADY, "(port)s_axi_timestamp_BREADY");
    sc_trace(mVcdFile, s_axi_timestamp_BRESP, "(port)s_axi_timestamp_BRESP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, write_timestamp_V_ap_vld, "write_timestamp_V_ap_vld");
    sc_trace(mVcdFile, read_timestamp_V_ap_vld, "read_timestamp_V_ap_vld");
    sc_trace(mVcdFile, local_read_timestamp, "local_read_timestamp");
    sc_trace(mVcdFile, local_write_timestam, "local_write_timestam");
    sc_trace(mVcdFile, read_latency_counter, "read_latency_counter");
    sc_trace(mVcdFile, read_count_flag_V, "read_count_flag_V");
    sc_trace(mVcdFile, write_latency_counte, "write_latency_counte");
    sc_trace(mVcdFile, write_count_flag_V, "write_count_flag_V");
    sc_trace(mVcdFile, ap_phi_mux_read_latency_counter_2_phi_fu_143_p6, "ap_phi_mux_read_latency_counter_2_phi_fu_143_p6");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ret_V_fu_174_p2, "ret_V_fu_174_p2");
    sc_trace(mVcdFile, read_latency_counter_1_fu_189_p2, "read_latency_counter_1_fu_189_p2");
    sc_trace(mVcdFile, read_count_flag_V_lo_load_fu_185_p1, "read_count_flag_V_lo_load_fu_185_p1");
    sc_trace(mVcdFile, ap_phi_mux_write_latency_counte_1_phi_fu_155_p6, "ap_phi_mux_write_latency_counte_1_phi_fu_155_p6");
    sc_trace(mVcdFile, ret_V_2_fu_238_p2, "ret_V_2_fu_238_p2");
    sc_trace(mVcdFile, tmp_4_fu_253_p2, "tmp_4_fu_253_p2");
    sc_trace(mVcdFile, write_count_flag_V_l_load_fu_249_p1, "write_count_flag_V_l_load_fu_249_p1");
    sc_trace(mVcdFile, ret_V_1_fu_208_p2, "ret_V_1_fu_208_p2");
    sc_trace(mVcdFile, ret_V_3_fu_272_p2, "ret_V_3_fu_272_p2");
    sc_trace(mVcdFile, tmp_fu_232_p2, "tmp_fu_232_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("axi_timestamper.hdltvin.dat");
    mHdltvoutHandle.open("axi_timestamper.hdltvout.dat");
}

axi_timestamper::~axi_timestamper() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete axi_timestamper_timestamp_s_axi_U;
}

void axi_timestamper::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void axi_timestamper::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        if (esl_seteq<1,1,1>(ret_V_fu_174_p2.read(), ap_const_lv1_1)) {
            read_count_flag_V = ap_const_lv1_1;
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_fu_174_p2.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_1, ret_V_1_fu_208_p2.read()))) {
            read_count_flag_V = ap_const_lv1_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        if (esl_seteq<1,1,1>(ret_V_fu_174_p2.read(), ap_const_lv1_1)) {
            read_latency_counter = ap_const_lv32_0;
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_fu_174_p2.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_1, read_count_flag_V_lo_load_fu_185_p1.read()))) {
            read_latency_counter = read_latency_counter_1_fu_189_p2.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, ret_V_2_fu_238_p2.read())) {
            write_count_flag_V = ap_const_lv1_1;
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_2_fu_238_p2.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_1, ret_V_3_fu_272_p2.read()))) {
            write_count_flag_V = ap_const_lv1_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, ret_V_2_fu_238_p2.read())) {
            write_latency_counte = ap_const_lv32_0;
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_2_fu_238_p2.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_1, write_count_flag_V_l_load_fu_249_p1.read()))) {
            write_latency_counte = tmp_4_fu_253_p2.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_fu_174_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, ret_V_1_fu_208_p2.read()))) {
        local_read_timestamp = ap_phi_mux_read_latency_counter_2_phi_fu_143_p6.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_2_fu_238_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, ret_V_3_fu_272_p2.read()))) {
        local_write_timestam = ap_phi_mux_write_latency_counte_1_phi_fu_155_p6.read();
    }
}

void axi_timestamper::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void axi_timestamper::thread_ap_phi_mux_read_latency_counter_2_phi_fu_143_p6() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        if ((esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_fu_174_p2.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, read_count_flag_V_lo_load_fu_185_p1.read()))) {
            ap_phi_mux_read_latency_counter_2_phi_fu_143_p6 = read_latency_counter.read();
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_fu_174_p2.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_1, read_count_flag_V_lo_load_fu_185_p1.read()))) {
            ap_phi_mux_read_latency_counter_2_phi_fu_143_p6 = read_latency_counter_1_fu_189_p2.read();
        } else if (esl_seteq<1,1,1>(ret_V_fu_174_p2.read(), ap_const_lv1_1)) {
            ap_phi_mux_read_latency_counter_2_phi_fu_143_p6 = ap_const_lv32_0;
        } else {
            ap_phi_mux_read_latency_counter_2_phi_fu_143_p6 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        ap_phi_mux_read_latency_counter_2_phi_fu_143_p6 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void axi_timestamper::thread_ap_phi_mux_write_latency_counte_1_phi_fu_155_p6() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        if ((esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_2_fu_238_p2.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, write_count_flag_V_l_load_fu_249_p1.read()))) {
            ap_phi_mux_write_latency_counte_1_phi_fu_155_p6 = write_latency_counte.read();
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_2_fu_238_p2.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_1, write_count_flag_V_l_load_fu_249_p1.read()))) {
            ap_phi_mux_write_latency_counte_1_phi_fu_155_p6 = tmp_4_fu_253_p2.read();
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, ret_V_2_fu_238_p2.read())) {
            ap_phi_mux_write_latency_counte_1_phi_fu_155_p6 = ap_const_lv32_0;
        } else {
            ap_phi_mux_write_latency_counte_1_phi_fu_155_p6 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        ap_phi_mux_write_latency_counte_1_phi_fu_155_p6 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void axi_timestamper::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void axi_timestamper::thread_read_count_flag_V_lo_load_fu_185_p1() {
    read_count_flag_V_lo_load_fu_185_p1 = read_count_flag_V.read();
}

void axi_timestamper::thread_read_latency_counter_1_fu_189_p2() {
    read_latency_counter_1_fu_189_p2 = (!read_latency_counter.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(read_latency_counter.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void axi_timestamper::thread_read_timestamp_V_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        read_timestamp_V_ap_vld = ap_const_logic_1;
    } else {
        read_timestamp_V_ap_vld = ap_const_logic_0;
    }
}

void axi_timestamper::thread_ret_V_1_fu_208_p2() {
    ret_V_1_fu_208_p2 = (rvalid_V.read() & rready_V.read());
}

void axi_timestamper::thread_ret_V_2_fu_238_p2() {
    ret_V_2_fu_238_p2 = (tmp_fu_232_p2.read() & wvalid_V.read());
}

void axi_timestamper::thread_ret_V_3_fu_272_p2() {
    ret_V_3_fu_272_p2 = (bvalid_V.read() & bready_V.read());
}

void axi_timestamper::thread_ret_V_fu_174_p2() {
    ret_V_fu_174_p2 = (arvalid_V.read() & arready_V.read());
}

void axi_timestamper::thread_tmp_4_fu_253_p2() {
    tmp_4_fu_253_p2 = (!write_latency_counte.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(write_latency_counte.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void axi_timestamper::thread_tmp_fu_232_p2() {
    tmp_fu_232_p2 = (wready_V.read() & wlast_V.read());
}

void axi_timestamper::thread_write_count_flag_V_l_load_fu_249_p1() {
    write_count_flag_V_l_load_fu_249_p1 = write_count_flag_V.read();
}

void axi_timestamper::thread_write_timestamp_V_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        write_timestamp_V_ap_vld = ap_const_logic_1;
    } else {
        write_timestamp_V_ap_vld = ap_const_logic_0;
    }
}

void axi_timestamper::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<1>) ("X");
            break;
    }
}

void axi_timestamper::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"arvalid_V\" :  \"" << arvalid_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"arready_V\" :  \"" << arready_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"rvalid_V\" :  \"" << rvalid_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"rready_V\" :  \"" << rready_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"wvalid_V\" :  \"" << wvalid_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"wready_V\" :  \"" << wready_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"wlast_V\" :  \"" << wlast_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"bvalid_V\" :  \"" << bvalid_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"bready_V\" :  \"" << bready_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_timestamp_AWVALID\" :  \"" << s_axi_timestamp_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_timestamp_AWREADY\" :  \"" << s_axi_timestamp_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_timestamp_AWADDR\" :  \"" << s_axi_timestamp_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_timestamp_WVALID\" :  \"" << s_axi_timestamp_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_timestamp_WREADY\" :  \"" << s_axi_timestamp_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_timestamp_WDATA\" :  \"" << s_axi_timestamp_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_timestamp_WSTRB\" :  \"" << s_axi_timestamp_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_timestamp_ARVALID\" :  \"" << s_axi_timestamp_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_timestamp_ARREADY\" :  \"" << s_axi_timestamp_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_timestamp_ARADDR\" :  \"" << s_axi_timestamp_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_timestamp_RVALID\" :  \"" << s_axi_timestamp_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_timestamp_RREADY\" :  \"" << s_axi_timestamp_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_timestamp_RDATA\" :  \"" << s_axi_timestamp_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_timestamp_RRESP\" :  \"" << s_axi_timestamp_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_timestamp_BVALID\" :  \"" << s_axi_timestamp_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_timestamp_BREADY\" :  \"" << s_axi_timestamp_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_timestamp_BRESP\" :  \"" << s_axi_timestamp_BRESP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

