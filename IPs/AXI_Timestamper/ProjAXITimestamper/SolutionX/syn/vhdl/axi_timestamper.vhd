-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity axi_timestamper is
generic (
    C_S_AXI_TIMESTAMP_ADDR_WIDTH : INTEGER := 32;
    C_S_AXI_TIMESTAMP_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    arvalid_V : IN STD_LOGIC_VECTOR (0 downto 0);
    arready_V : IN STD_LOGIC_VECTOR (0 downto 0);
    rvalid_V : IN STD_LOGIC_VECTOR (0 downto 0);
    rready_V : IN STD_LOGIC_VECTOR (0 downto 0);
    wvalid_V : IN STD_LOGIC_VECTOR (0 downto 0);
    wready_V : IN STD_LOGIC_VECTOR (0 downto 0);
    wlast_V : IN STD_LOGIC_VECTOR (0 downto 0);
    bvalid_V : IN STD_LOGIC_VECTOR (0 downto 0);
    bready_V : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axi_timestamp_AWVALID : IN STD_LOGIC;
    s_axi_timestamp_AWREADY : OUT STD_LOGIC;
    s_axi_timestamp_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_TIMESTAMP_ADDR_WIDTH-1 downto 0);
    s_axi_timestamp_WVALID : IN STD_LOGIC;
    s_axi_timestamp_WREADY : OUT STD_LOGIC;
    s_axi_timestamp_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_TIMESTAMP_DATA_WIDTH-1 downto 0);
    s_axi_timestamp_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_TIMESTAMP_DATA_WIDTH/8-1 downto 0);
    s_axi_timestamp_ARVALID : IN STD_LOGIC;
    s_axi_timestamp_ARREADY : OUT STD_LOGIC;
    s_axi_timestamp_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_TIMESTAMP_ADDR_WIDTH-1 downto 0);
    s_axi_timestamp_RVALID : OUT STD_LOGIC;
    s_axi_timestamp_RREADY : IN STD_LOGIC;
    s_axi_timestamp_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_TIMESTAMP_DATA_WIDTH-1 downto 0);
    s_axi_timestamp_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_timestamp_BVALID : OUT STD_LOGIC;
    s_axi_timestamp_BREADY : IN STD_LOGIC;
    s_axi_timestamp_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of axi_timestamper is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "axi_timestamper,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcku040-ffva1156-2-e,HLS_INPUT_CLOCK=3.300000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.404500,HLS_SYN_LAT=0,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=237,HLS_SYN_LUT=316,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal write_timestamp_V_ap_vld : STD_LOGIC;
    signal read_timestamp_V_ap_vld : STD_LOGIC;
    signal local_read_timestamp : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal local_write_timestam : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal read_latency_counter : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal read_count_flag_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal write_latency_counte : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal write_count_flag_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_phi_mux_read_latency_counter_2_phi_fu_143_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ret_V_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal read_latency_counter_1_fu_189_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_count_flag_V_lo_load_fu_185_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_write_latency_counte_1_phi_fu_155_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_2_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_253_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_count_flag_V_l_load_fu_249_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_1_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_3_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);

    component axi_timestamper_timestamp_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        write_timestamp_V : IN STD_LOGIC_VECTOR (31 downto 0);
        write_timestamp_V_ap_vld : IN STD_LOGIC;
        read_timestamp_V : IN STD_LOGIC_VECTOR (31 downto 0);
        read_timestamp_V_ap_vld : IN STD_LOGIC );
    end component;



begin
    axi_timestamper_timestamp_s_axi_U : component axi_timestamper_timestamp_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_TIMESTAMP_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_TIMESTAMP_DATA_WIDTH)
    port map (
        AWVALID => s_axi_timestamp_AWVALID,
        AWREADY => s_axi_timestamp_AWREADY,
        AWADDR => s_axi_timestamp_AWADDR,
        WVALID => s_axi_timestamp_WVALID,
        WREADY => s_axi_timestamp_WREADY,
        WDATA => s_axi_timestamp_WDATA,
        WSTRB => s_axi_timestamp_WSTRB,
        ARVALID => s_axi_timestamp_ARVALID,
        ARREADY => s_axi_timestamp_ARREADY,
        ARADDR => s_axi_timestamp_ARADDR,
        RVALID => s_axi_timestamp_RVALID,
        RREADY => s_axi_timestamp_RREADY,
        RDATA => s_axi_timestamp_RDATA,
        RRESP => s_axi_timestamp_RRESP,
        BVALID => s_axi_timestamp_BVALID,
        BREADY => s_axi_timestamp_BREADY,
        BRESP => s_axi_timestamp_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        write_timestamp_V => local_write_timestam,
        write_timestamp_V_ap_vld => write_timestamp_V_ap_vld,
        read_timestamp_V => local_read_timestamp,
        read_timestamp_V_ap_vld => read_timestamp_V_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    read_count_flag_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                if ((ret_V_fu_174_p2 = ap_const_lv1_1)) then 
                    read_count_flag_V <= ap_const_lv1_1;
                elsif (((ret_V_1_fu_208_p2 = ap_const_lv1_1) and (ret_V_fu_174_p2 = ap_const_lv1_0))) then 
                    read_count_flag_V <= ap_const_lv1_0;
                end if;
            end if; 
        end if;
    end process;

    read_latency_counter_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                if ((ret_V_fu_174_p2 = ap_const_lv1_1)) then 
                    read_latency_counter <= ap_const_lv32_0;
                elsif (((read_count_flag_V_lo_load_fu_185_p1 = ap_const_lv1_1) and (ret_V_fu_174_p2 = ap_const_lv1_0))) then 
                    read_latency_counter <= read_latency_counter_1_fu_189_p2;
                end if;
            end if; 
        end if;
    end process;

    write_count_flag_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                if ((ret_V_2_fu_238_p2 = ap_const_lv1_1)) then 
                    write_count_flag_V <= ap_const_lv1_1;
                elsif (((ret_V_3_fu_272_p2 = ap_const_lv1_1) and (ret_V_2_fu_238_p2 = ap_const_lv1_0))) then 
                    write_count_flag_V <= ap_const_lv1_0;
                end if;
            end if; 
        end if;
    end process;

    write_latency_counte_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                if ((ret_V_2_fu_238_p2 = ap_const_lv1_1)) then 
                    write_latency_counte <= ap_const_lv32_0;
                elsif (((write_count_flag_V_l_load_fu_249_p1 = ap_const_lv1_1) and (ret_V_2_fu_238_p2 = ap_const_lv1_0))) then 
                    write_latency_counte <= tmp_4_fu_253_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ret_V_1_fu_208_p2 = ap_const_lv1_1) and (ret_V_fu_174_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                local_read_timestamp <= ap_phi_mux_read_latency_counter_2_phi_fu_143_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ret_V_3_fu_272_p2 = ap_const_lv1_1) and (ret_V_2_fu_238_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                local_write_timestam <= ap_phi_mux_write_latency_counte_1_phi_fu_155_p6;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_phi_mux_read_latency_counter_2_phi_fu_143_p6_assign_proc : process(read_latency_counter, ap_CS_fsm_state1, ret_V_fu_174_p2, read_latency_counter_1_fu_189_p2, read_count_flag_V_lo_load_fu_185_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if (((read_count_flag_V_lo_load_fu_185_p1 = ap_const_lv1_0) and (ret_V_fu_174_p2 = ap_const_lv1_0))) then 
                ap_phi_mux_read_latency_counter_2_phi_fu_143_p6 <= read_latency_counter;
            elsif (((read_count_flag_V_lo_load_fu_185_p1 = ap_const_lv1_1) and (ret_V_fu_174_p2 = ap_const_lv1_0))) then 
                ap_phi_mux_read_latency_counter_2_phi_fu_143_p6 <= read_latency_counter_1_fu_189_p2;
            elsif ((ret_V_fu_174_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_read_latency_counter_2_phi_fu_143_p6 <= ap_const_lv32_0;
            else 
                ap_phi_mux_read_latency_counter_2_phi_fu_143_p6 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_read_latency_counter_2_phi_fu_143_p6 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_write_latency_counte_1_phi_fu_155_p6_assign_proc : process(write_latency_counte, ap_CS_fsm_state1, ret_V_2_fu_238_p2, tmp_4_fu_253_p2, write_count_flag_V_l_load_fu_249_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if (((write_count_flag_V_l_load_fu_249_p1 = ap_const_lv1_0) and (ret_V_2_fu_238_p2 = ap_const_lv1_0))) then 
                ap_phi_mux_write_latency_counte_1_phi_fu_155_p6 <= write_latency_counte;
            elsif (((write_count_flag_V_l_load_fu_249_p1 = ap_const_lv1_1) and (ret_V_2_fu_238_p2 = ap_const_lv1_0))) then 
                ap_phi_mux_write_latency_counte_1_phi_fu_155_p6 <= tmp_4_fu_253_p2;
            elsif ((ret_V_2_fu_238_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_write_latency_counte_1_phi_fu_155_p6 <= ap_const_lv32_0;
            else 
                ap_phi_mux_write_latency_counte_1_phi_fu_155_p6 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_write_latency_counte_1_phi_fu_155_p6 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    read_count_flag_V_lo_load_fu_185_p1 <= read_count_flag_V;
    read_latency_counter_1_fu_189_p2 <= std_logic_vector(unsigned(read_latency_counter) + unsigned(ap_const_lv32_1));

    read_timestamp_V_ap_vld_assign_proc : process(ap_CS_fsm_state1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            read_timestamp_V_ap_vld <= ap_const_logic_1;
        else 
            read_timestamp_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_1_fu_208_p2 <= (rvalid_V and rready_V);
    ret_V_2_fu_238_p2 <= (wvalid_V and tmp_fu_232_p2);
    ret_V_3_fu_272_p2 <= (bvalid_V and bready_V);
    ret_V_fu_174_p2 <= (arvalid_V and arready_V);
    tmp_4_fu_253_p2 <= std_logic_vector(unsigned(write_latency_counte) + unsigned(ap_const_lv32_1));
    tmp_fu_232_p2 <= (wready_V and wlast_V);
    write_count_flag_V_l_load_fu_249_p1 <= write_count_flag_V;

    write_timestamp_V_ap_vld_assign_proc : process(ap_CS_fsm_state1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            write_timestamp_V_ap_vld <= ap_const_logic_1;
        else 
            write_timestamp_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
