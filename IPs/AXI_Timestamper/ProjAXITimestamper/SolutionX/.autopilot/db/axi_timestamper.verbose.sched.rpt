

================================================================
== Vivado HLS Report for 'axi_timestamper'
================================================================
* Date:           Thu Jul 14 17:17:43 2022

* Version:        2018.3 (Build 2405991 on Thu Dec 06 23:56:15 MST 2018)
* Project:        ProjAXITimestamper
* Solution:       SolutionX
* Product family: kintexu
* Target device:  xcku040-ffva1156-2-e


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |   3.30|     2.405|        0.30|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+----------+
    |  Latency  |  Interval | Pipeline |
    | min | max | min | max |   Type   |
    +-----+-----+-----+-----+----------+
    |    0|    0|    1|    1| function |
    +-----+-----+-----+-----+----------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 0
IsPipeline: 1
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 1


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 1
* Pipeline : 1
  Pipeline-0 : II = 1, D = 1, States = { 1 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 2.40>
ST_1 : Operation 2 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1 %arvalid_V), !map !47"   --->   Operation 2 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 3 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1 %arready_V), !map !53"   --->   Operation 3 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 4 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1 %rvalid_V), !map !57"   --->   Operation 4 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 5 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1 %rready_V), !map !61"   --->   Operation 5 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1 %wvalid_V), !map !65"   --->   Operation 6 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1 %wready_V), !map !69"   --->   Operation 7 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1 %wlast_V), !map !73"   --->   Operation 8 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1 %bvalid_V), !map !77"   --->   Operation 9 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1 %bready_V), !map !81"   --->   Operation 10 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32* %write_timestamp_V), !map !85"   --->   Operation 11 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32* %read_timestamp_V), !map !89"   --->   Operation 12 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecTopModule([16 x i8]* @axi_timestamper_str) nounwind"   --->   Operation 13 'spectopmodule' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%bready_V_read = call i1 @_ssdm_op_Read.ap_none.i1(i1 %bready_V)" [axi_timestamper.cpp:15]   --->   Operation 14 'read' 'bready_V_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%bvalid_V_read = call i1 @_ssdm_op_Read.ap_none.i1(i1 %bvalid_V)" [axi_timestamper.cpp:15]   --->   Operation 15 'read' 'bvalid_V_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%wlast_V_read = call i1 @_ssdm_op_Read.ap_none.i1(i1 %wlast_V)" [axi_timestamper.cpp:15]   --->   Operation 16 'read' 'wlast_V_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%wready_V_read = call i1 @_ssdm_op_Read.ap_none.i1(i1 %wready_V)" [axi_timestamper.cpp:15]   --->   Operation 17 'read' 'wready_V_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%wvalid_V_read = call i1 @_ssdm_op_Read.ap_none.i1(i1 %wvalid_V)" [axi_timestamper.cpp:15]   --->   Operation 18 'read' 'wvalid_V_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%rready_V_read = call i1 @_ssdm_op_Read.ap_none.i1(i1 %rready_V)" [axi_timestamper.cpp:15]   --->   Operation 19 'read' 'rready_V_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%rvalid_V_read = call i1 @_ssdm_op_Read.ap_none.i1(i1 %rvalid_V)" [axi_timestamper.cpp:15]   --->   Operation 20 'read' 'rvalid_V_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%arready_V_read = call i1 @_ssdm_op_Read.ap_none.i1(i1 %arready_V)" [axi_timestamper.cpp:15]   --->   Operation 21 'read' 'arready_V_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%arvalid_V_read = call i1 @_ssdm_op_Read.ap_none.i1(i1 %arvalid_V)" [axi_timestamper.cpp:15]   --->   Operation 22 'read' 'arvalid_V_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecPipeline(i32 -1, i32 1, i32 1, i32 0, [1 x i8]* @p_str) nounwind" [axi_timestamper.cpp:17]   --->   Operation 23 'specpipeline' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32 0, [13 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str) nounwind" [axi_timestamper.cpp:18]   --->   Operation 24 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i1 %arvalid_V, [8 x i8]* @p_str2, i32 0, i32 0, [1 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str) nounwind" [axi_timestamper.cpp:20]   --->   Operation 25 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 26 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i1 %arready_V, [8 x i8]* @p_str2, i32 0, i32 0, [1 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str) nounwind" [axi_timestamper.cpp:21]   --->   Operation 26 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 27 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i1 %rvalid_V, [8 x i8]* @p_str2, i32 0, i32 0, [1 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str) nounwind" [axi_timestamper.cpp:22]   --->   Operation 27 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 28 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i1 %rready_V, [8 x i8]* @p_str2, i32 0, i32 0, [1 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str) nounwind" [axi_timestamper.cpp:23]   --->   Operation 28 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 29 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i1 %wvalid_V, [8 x i8]* @p_str2, i32 0, i32 0, [1 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str) nounwind" [axi_timestamper.cpp:25]   --->   Operation 29 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 30 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i1 %wready_V, [8 x i8]* @p_str2, i32 0, i32 0, [1 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str) nounwind" [axi_timestamper.cpp:26]   --->   Operation 30 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 31 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i1 %wlast_V, [8 x i8]* @p_str2, i32 0, i32 0, [1 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str) nounwind" [axi_timestamper.cpp:27]   --->   Operation 31 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 32 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i1 %bvalid_V, [8 x i8]* @p_str2, i32 0, i32 0, [1 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str) nounwind" [axi_timestamper.cpp:28]   --->   Operation 32 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 33 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i1 %bready_V, [8 x i8]* @p_str2, i32 0, i32 0, [1 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str) nounwind" [axi_timestamper.cpp:29]   --->   Operation 33 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 34 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32* %write_timestamp_V, [10 x i8]* @p_str3, i32 0, i32 0, [1 x i8]* @p_str, i32 0, i32 0, [10 x i8]* @p_str4, [11 x i8]* @p_str5, [1 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str) nounwind" [axi_timestamper.cpp:31]   --->   Operation 34 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 35 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32* %read_timestamp_V, [10 x i8]* @p_str3, i32 0, i32 0, [1 x i8]* @p_str, i32 0, i32 0, [10 x i8]* @p_str4, [11 x i8]* @p_str6, [1 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str) nounwind" [axi_timestamper.cpp:32]   --->   Operation 35 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 36 [1/1] (0.00ns)   --->   "%local_read_timestamp_1 = load i32* @local_read_timestamp, align 4" [axi_timestamper.cpp:41]   --->   Operation 36 'load' 'local_read_timestamp_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 37 [1/1] (1.00ns)   --->   "call void @_ssdm_op_Write.s_axilite.i32P(i32* %read_timestamp_V, i32 %local_read_timestamp_1)" [axi_timestamper.cpp:41]   --->   Operation 37 'write' <Predicate = true> <Delay = 1.00> <Core = "s_axilite">   --->   Core 10 's_axilite' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write'>
ST_1 : Operation 38 [1/1] (0.00ns)   --->   "%local_write_timestam_1 = load i32* @local_write_timestam, align 4" [axi_timestamper.cpp:42]   --->   Operation 38 'load' 'local_write_timestam_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 39 [1/1] (1.00ns)   --->   "call void @_ssdm_op_Write.s_axilite.i32P(i32* %write_timestamp_V, i32 %local_write_timestam_1)" [axi_timestamper.cpp:42]   --->   Operation 39 'write' <Predicate = true> <Delay = 1.00> <Core = "s_axilite">   --->   Core 10 's_axilite' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write'>
ST_1 : Operation 40 [1/1] (0.33ns)   --->   "%ret_V = and i1 %arvalid_V_read, %arready_V_read" [axi_timestamper.cpp:46]   --->   Operation 40 'and' 'ret_V' <Predicate = true> <Delay = 0.33> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 41 [1/1] (0.00ns)   --->   "%t_V = load i32* @read_latency_counter, align 4" [axi_timestamper.cpp:50]   --->   Operation 41 'load' 't_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 42 [1/1] (0.00ns)   --->   "br i1 %ret_V, label %0, label %1" [axi_timestamper.cpp:46]   --->   Operation 42 'br' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 43 [1/1] (0.00ns)   --->   "%read_count_flag_V_lo = load i1* @read_count_flag_V, align 1" [axi_timestamper.cpp:49]   --->   Operation 43 'load' 'read_count_flag_V_lo' <Predicate = (!ret_V)> <Delay = 0.00>
ST_1 : Operation 44 [1/1] (0.91ns)   --->   "br i1 %read_count_flag_V_lo, label %2, label %._crit_edge281" [axi_timestamper.cpp:49]   --->   Operation 44 'br' <Predicate = (!ret_V)> <Delay = 0.91>
ST_1 : Operation 45 [1/1] (1.48ns)   --->   "%read_latency_counter_1 = add i32 %t_V, 1" [axi_timestamper.cpp:50]   --->   Operation 45 'add' 'read_latency_counter_1' <Predicate = (!ret_V & read_count_flag_V_lo)> <Delay = 1.48> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.48> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 46 [1/1] (0.83ns)   --->   "store i32 %read_latency_counter_1, i32* @read_latency_counter, align 4" [axi_timestamper.cpp:50]   --->   Operation 46 'store' <Predicate = (!ret_V & read_count_flag_V_lo)> <Delay = 0.83>
ST_1 : Operation 47 [1/1] (0.91ns)   --->   "br label %._crit_edge281" [axi_timestamper.cpp:51]   --->   Operation 47 'br' <Predicate = (!ret_V & read_count_flag_V_lo)> <Delay = 0.91>
ST_1 : Operation 48 [1/1] (0.83ns)   --->   "store i32 0, i32* @read_latency_counter, align 4" [axi_timestamper.cpp:47]   --->   Operation 48 'store' <Predicate = (ret_V)> <Delay = 0.83>
ST_1 : Operation 49 [1/1] (0.91ns)   --->   "br label %._crit_edge281" [axi_timestamper.cpp:48]   --->   Operation 49 'br' <Predicate = (ret_V)> <Delay = 0.91>
ST_1 : Operation 50 [1/1] (0.00ns)   --->   "%read_latency_counter_2 = phi i32 [ 0, %0 ], [ %read_latency_counter_1, %2 ], [ %t_V, %1 ]"   --->   Operation 50 'phi' 'read_latency_counter_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 51 [1/1] (0.00ns)   --->   "br i1 %ret_V, label %3, label %4" [axi_timestamper.cpp:53]   --->   Operation 51 'br' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 52 [1/1] (0.33ns)   --->   "%ret_V_1 = and i1 %rvalid_V_read, %rready_V_read" [axi_timestamper.cpp:56]   --->   Operation 52 'and' 'ret_V_1' <Predicate = (!ret_V)> <Delay = 0.33> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 53 [1/1] (0.00ns)   --->   "br i1 %ret_V_1, label %5, label %._crit_edge282" [axi_timestamper.cpp:56]   --->   Operation 53 'br' <Predicate = (!ret_V)> <Delay = 0.00>
ST_1 : Operation 54 [1/1] (0.83ns)   --->   "store i1 false, i1* @read_count_flag_V, align 1" [axi_timestamper.cpp:57]   --->   Operation 54 'store' <Predicate = (!ret_V & ret_V_1)> <Delay = 0.83>
ST_1 : Operation 55 [1/1] (0.00ns)   --->   "store i32 %read_latency_counter_2, i32* @local_read_timestamp, align 4" [axi_timestamper.cpp:58]   --->   Operation 55 'store' <Predicate = (!ret_V & ret_V_1)> <Delay = 0.00>
ST_1 : Operation 56 [1/1] (0.00ns)   --->   "br label %._crit_edge282" [axi_timestamper.cpp:59]   --->   Operation 56 'br' <Predicate = (!ret_V & ret_V_1)> <Delay = 0.00>
ST_1 : Operation 57 [1/1] (0.00ns)   --->   "br label %6"   --->   Operation 57 'br' <Predicate = (!ret_V)> <Delay = 0.00>
ST_1 : Operation 58 [1/1] (0.83ns)   --->   "store i1 true, i1* @read_count_flag_V, align 1" [axi_timestamper.cpp:54]   --->   Operation 58 'store' <Predicate = (ret_V)> <Delay = 0.83>
ST_1 : Operation 59 [1/1] (0.00ns)   --->   "br label %6" [axi_timestamper.cpp:55]   --->   Operation 59 'br' <Predicate = (ret_V)> <Delay = 0.00>
ST_1 : Operation 60 [1/1] (0.00ns) (grouped into LUT with out node ret_V_2)   --->   "%tmp = and i1 %wready_V_read, %wlast_V_read" [axi_timestamper.cpp:61]   --->   Operation 60 'and' 'tmp' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 61 [1/1] (0.33ns) (out node of the LUT)   --->   "%ret_V_2 = and i1 %tmp, %wvalid_V_read" [axi_timestamper.cpp:61]   --->   Operation 61 'and' 'ret_V_2' <Predicate = true> <Delay = 0.33> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 62 [1/1] (0.00ns)   --->   "%t_V_1 = load i32* @write_latency_counte, align 4" [axi_timestamper.cpp:65]   --->   Operation 62 'load' 't_V_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 63 [1/1] (0.00ns)   --->   "br i1 %ret_V_2, label %7, label %8" [axi_timestamper.cpp:61]   --->   Operation 63 'br' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 64 [1/1] (0.00ns)   --->   "%write_count_flag_V_l = load i1* @write_count_flag_V, align 1" [axi_timestamper.cpp:64]   --->   Operation 64 'load' 'write_count_flag_V_l' <Predicate = (!ret_V_2)> <Delay = 0.00>
ST_1 : Operation 65 [1/1] (0.91ns)   --->   "br i1 %write_count_flag_V_l, label %9, label %._crit_edge283" [axi_timestamper.cpp:64]   --->   Operation 65 'br' <Predicate = (!ret_V_2)> <Delay = 0.91>
ST_1 : Operation 66 [1/1] (1.48ns)   --->   "%tmp_4 = add i32 %t_V_1, 1" [axi_timestamper.cpp:65]   --->   Operation 66 'add' 'tmp_4' <Predicate = (!ret_V_2 & write_count_flag_V_l)> <Delay = 1.48> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.48> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 67 [1/1] (0.83ns)   --->   "store i32 %tmp_4, i32* @write_latency_counte, align 4" [axi_timestamper.cpp:65]   --->   Operation 67 'store' <Predicate = (!ret_V_2 & write_count_flag_V_l)> <Delay = 0.83>
ST_1 : Operation 68 [1/1] (0.91ns)   --->   "br label %._crit_edge283" [axi_timestamper.cpp:66]   --->   Operation 68 'br' <Predicate = (!ret_V_2 & write_count_flag_V_l)> <Delay = 0.91>
ST_1 : Operation 69 [1/1] (0.83ns)   --->   "store i32 0, i32* @write_latency_counte, align 4" [axi_timestamper.cpp:62]   --->   Operation 69 'store' <Predicate = (ret_V_2)> <Delay = 0.83>
ST_1 : Operation 70 [1/1] (0.91ns)   --->   "br label %._crit_edge283" [axi_timestamper.cpp:63]   --->   Operation 70 'br' <Predicate = (ret_V_2)> <Delay = 0.91>
ST_1 : Operation 71 [1/1] (0.00ns)   --->   "%write_latency_counte_1 = phi i32 [ 0, %7 ], [ %tmp_4, %9 ], [ %t_V_1, %8 ]"   --->   Operation 71 'phi' 'write_latency_counte_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 72 [1/1] (0.00ns)   --->   "br i1 %ret_V_2, label %10, label %11" [axi_timestamper.cpp:68]   --->   Operation 72 'br' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 73 [1/1] (0.33ns)   --->   "%ret_V_3 = and i1 %bvalid_V_read, %bready_V_read" [axi_timestamper.cpp:71]   --->   Operation 73 'and' 'ret_V_3' <Predicate = (!ret_V_2)> <Delay = 0.33> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 74 [1/1] (0.00ns)   --->   "br i1 %ret_V_3, label %12, label %._crit_edge284" [axi_timestamper.cpp:71]   --->   Operation 74 'br' <Predicate = (!ret_V_2)> <Delay = 0.00>
ST_1 : Operation 75 [1/1] (0.83ns)   --->   "store i1 false, i1* @write_count_flag_V, align 1" [axi_timestamper.cpp:72]   --->   Operation 75 'store' <Predicate = (!ret_V_2 & ret_V_3)> <Delay = 0.83>
ST_1 : Operation 76 [1/1] (0.00ns)   --->   "store i32 %write_latency_counte_1, i32* @local_write_timestam, align 4" [axi_timestamper.cpp:73]   --->   Operation 76 'store' <Predicate = (!ret_V_2 & ret_V_3)> <Delay = 0.00>
ST_1 : Operation 77 [1/1] (0.00ns)   --->   "br label %._crit_edge284" [axi_timestamper.cpp:74]   --->   Operation 77 'br' <Predicate = (!ret_V_2 & ret_V_3)> <Delay = 0.00>
ST_1 : Operation 78 [1/1] (0.00ns)   --->   "br label %13"   --->   Operation 78 'br' <Predicate = (!ret_V_2)> <Delay = 0.00>
ST_1 : Operation 79 [1/1] (0.83ns)   --->   "store i1 true, i1* @write_count_flag_V, align 1" [axi_timestamper.cpp:69]   --->   Operation 79 'store' <Predicate = (ret_V_2)> <Delay = 0.83>
ST_1 : Operation 80 [1/1] (0.00ns)   --->   "br label %13" [axi_timestamper.cpp:70]   --->   Operation 80 'br' <Predicate = (ret_V_2)> <Delay = 0.00>
ST_1 : Operation 81 [1/1] (0.00ns)   --->   "ret void" [axi_timestamper.cpp:75]   --->   Operation 81 'ret' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 3.3ns, clock uncertainty: 0.3ns.

 <State 1>: 2.4ns
The critical path consists of the following:
	'load' operation ('t.V', axi_timestamper.cpp:50) on static variable 'read_latency_counter' [57]  (0 ns)
	'add' operation ('read_latency_counter_1', axi_timestamper.cpp:50) [63]  (1.49 ns)
	multiplexor before 'phi' operation ('t.V') with incoming values : ('t.V', axi_timestamper.cpp:50) ('read_latency_counter_1', axi_timestamper.cpp:50) [70]  (0.918 ns)
	'phi' operation ('t.V') with incoming values : ('t.V', axi_timestamper.cpp:50) ('read_latency_counter_1', axi_timestamper.cpp:50) [70]  (0 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
