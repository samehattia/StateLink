// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="axi_timestamper,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcku040-ffva1156-2-e,HLS_INPUT_CLOCK=3.300000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.404500,HLS_SYN_LAT=0,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=237,HLS_SYN_LUT=316,HLS_VERSION=2018_3}" *)

module axi_timestamper (
        ap_clk,
        ap_rst_n,
        arvalid_V,
        arready_V,
        rvalid_V,
        rready_V,
        wvalid_V,
        wready_V,
        wlast_V,
        bvalid_V,
        bready_V,
        s_axi_timestamp_AWVALID,
        s_axi_timestamp_AWREADY,
        s_axi_timestamp_AWADDR,
        s_axi_timestamp_WVALID,
        s_axi_timestamp_WREADY,
        s_axi_timestamp_WDATA,
        s_axi_timestamp_WSTRB,
        s_axi_timestamp_ARVALID,
        s_axi_timestamp_ARREADY,
        s_axi_timestamp_ARADDR,
        s_axi_timestamp_RVALID,
        s_axi_timestamp_RREADY,
        s_axi_timestamp_RDATA,
        s_axi_timestamp_RRESP,
        s_axi_timestamp_BVALID,
        s_axi_timestamp_BREADY,
        s_axi_timestamp_BRESP
);

parameter    ap_ST_fsm_state1 = 1'd1;
parameter    C_S_AXI_TIMESTAMP_DATA_WIDTH = 32;
parameter    C_S_AXI_TIMESTAMP_ADDR_WIDTH = 32;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_TIMESTAMP_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [0:0] arvalid_V;
input  [0:0] arready_V;
input  [0:0] rvalid_V;
input  [0:0] rready_V;
input  [0:0] wvalid_V;
input  [0:0] wready_V;
input  [0:0] wlast_V;
input  [0:0] bvalid_V;
input  [0:0] bready_V;
input   s_axi_timestamp_AWVALID;
output   s_axi_timestamp_AWREADY;
input  [C_S_AXI_TIMESTAMP_ADDR_WIDTH - 1:0] s_axi_timestamp_AWADDR;
input   s_axi_timestamp_WVALID;
output   s_axi_timestamp_WREADY;
input  [C_S_AXI_TIMESTAMP_DATA_WIDTH - 1:0] s_axi_timestamp_WDATA;
input  [C_S_AXI_TIMESTAMP_WSTRB_WIDTH - 1:0] s_axi_timestamp_WSTRB;
input   s_axi_timestamp_ARVALID;
output   s_axi_timestamp_ARREADY;
input  [C_S_AXI_TIMESTAMP_ADDR_WIDTH - 1:0] s_axi_timestamp_ARADDR;
output   s_axi_timestamp_RVALID;
input   s_axi_timestamp_RREADY;
output  [C_S_AXI_TIMESTAMP_DATA_WIDTH - 1:0] s_axi_timestamp_RDATA;
output  [1:0] s_axi_timestamp_RRESP;
output   s_axi_timestamp_BVALID;
input   s_axi_timestamp_BREADY;
output  [1:0] s_axi_timestamp_BRESP;

 reg    ap_rst_n_inv;
reg    write_timestamp_V_ap_vld;
reg    read_timestamp_V_ap_vld;
reg   [31:0] local_read_timestamp;
reg   [31:0] local_write_timestam;
reg   [31:0] read_latency_counter;
reg   [0:0] read_count_flag_V;
reg   [31:0] write_latency_counte;
reg   [0:0] write_count_flag_V;
reg   [31:0] ap_phi_mux_read_latency_counter_2_phi_fu_143_p6;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] ret_V_fu_174_p2;
wire   [31:0] read_latency_counter_1_fu_189_p2;
wire   [0:0] read_count_flag_V_lo_load_fu_185_p1;
reg   [31:0] ap_phi_mux_write_latency_counte_1_phi_fu_155_p6;
wire   [0:0] ret_V_2_fu_238_p2;
wire   [31:0] tmp_4_fu_253_p2;
wire   [0:0] write_count_flag_V_l_load_fu_249_p1;
wire   [0:0] ret_V_1_fu_208_p2;
wire   [0:0] ret_V_3_fu_272_p2;
wire   [0:0] tmp_fu_232_p2;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 local_read_timestamp = 32'd0;
#0 local_write_timestam = 32'd0;
#0 read_latency_counter = 32'd0;
#0 read_count_flag_V = 1'd0;
#0 write_latency_counte = 32'd0;
#0 write_count_flag_V = 1'd0;
#0 ap_CS_fsm = 1'd1;
end

axi_timestamper_timestamp_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_TIMESTAMP_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_TIMESTAMP_DATA_WIDTH ))
axi_timestamper_timestamp_s_axi_U(
    .AWVALID(s_axi_timestamp_AWVALID),
    .AWREADY(s_axi_timestamp_AWREADY),
    .AWADDR(s_axi_timestamp_AWADDR),
    .WVALID(s_axi_timestamp_WVALID),
    .WREADY(s_axi_timestamp_WREADY),
    .WDATA(s_axi_timestamp_WDATA),
    .WSTRB(s_axi_timestamp_WSTRB),
    .ARVALID(s_axi_timestamp_ARVALID),
    .ARREADY(s_axi_timestamp_ARREADY),
    .ARADDR(s_axi_timestamp_ARADDR),
    .RVALID(s_axi_timestamp_RVALID),
    .RREADY(s_axi_timestamp_RREADY),
    .RDATA(s_axi_timestamp_RDATA),
    .RRESP(s_axi_timestamp_RRESP),
    .BVALID(s_axi_timestamp_BVALID),
    .BREADY(s_axi_timestamp_BREADY),
    .BRESP(s_axi_timestamp_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .write_timestamp_V(local_write_timestam),
    .write_timestamp_V_ap_vld(write_timestamp_V_ap_vld),
    .read_timestamp_V(local_read_timestamp),
    .read_timestamp_V_ap_vld(read_timestamp_V_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((ret_V_fu_174_p2 == 1'd1)) begin
            read_count_flag_V <= 1'd1;
        end else if (((ret_V_1_fu_208_p2 == 1'd1) & (ret_V_fu_174_p2 == 1'd0))) begin
            read_count_flag_V <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((ret_V_fu_174_p2 == 1'd1)) begin
            read_latency_counter <= 32'd0;
        end else if (((read_count_flag_V_lo_load_fu_185_p1 == 1'd1) & (ret_V_fu_174_p2 == 1'd0))) begin
            read_latency_counter <= read_latency_counter_1_fu_189_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((ret_V_2_fu_238_p2 == 1'd1)) begin
            write_count_flag_V <= 1'd1;
        end else if (((ret_V_3_fu_272_p2 == 1'd1) & (ret_V_2_fu_238_p2 == 1'd0))) begin
            write_count_flag_V <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((ret_V_2_fu_238_p2 == 1'd1)) begin
            write_latency_counte <= 32'd0;
        end else if (((write_count_flag_V_l_load_fu_249_p1 == 1'd1) & (ret_V_2_fu_238_p2 == 1'd0))) begin
            write_latency_counte <= tmp_4_fu_253_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ret_V_1_fu_208_p2 == 1'd1) & (ret_V_fu_174_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        local_read_timestamp <= ap_phi_mux_read_latency_counter_2_phi_fu_143_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((ret_V_3_fu_272_p2 == 1'd1) & (ret_V_2_fu_238_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        local_write_timestam <= ap_phi_mux_write_latency_counte_1_phi_fu_155_p6;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if (((read_count_flag_V_lo_load_fu_185_p1 == 1'd0) & (ret_V_fu_174_p2 == 1'd0))) begin
            ap_phi_mux_read_latency_counter_2_phi_fu_143_p6 = read_latency_counter;
        end else if (((read_count_flag_V_lo_load_fu_185_p1 == 1'd1) & (ret_V_fu_174_p2 == 1'd0))) begin
            ap_phi_mux_read_latency_counter_2_phi_fu_143_p6 = read_latency_counter_1_fu_189_p2;
        end else if ((ret_V_fu_174_p2 == 1'd1)) begin
            ap_phi_mux_read_latency_counter_2_phi_fu_143_p6 = 32'd0;
        end else begin
            ap_phi_mux_read_latency_counter_2_phi_fu_143_p6 = 'bx;
        end
    end else begin
        ap_phi_mux_read_latency_counter_2_phi_fu_143_p6 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if (((write_count_flag_V_l_load_fu_249_p1 == 1'd0) & (ret_V_2_fu_238_p2 == 1'd0))) begin
            ap_phi_mux_write_latency_counte_1_phi_fu_155_p6 = write_latency_counte;
        end else if (((write_count_flag_V_l_load_fu_249_p1 == 1'd1) & (ret_V_2_fu_238_p2 == 1'd0))) begin
            ap_phi_mux_write_latency_counte_1_phi_fu_155_p6 = tmp_4_fu_253_p2;
        end else if ((ret_V_2_fu_238_p2 == 1'd1)) begin
            ap_phi_mux_write_latency_counte_1_phi_fu_155_p6 = 32'd0;
        end else begin
            ap_phi_mux_write_latency_counte_1_phi_fu_155_p6 = 'bx;
        end
    end else begin
        ap_phi_mux_write_latency_counte_1_phi_fu_155_p6 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        read_timestamp_V_ap_vld = 1'b1;
    end else begin
        read_timestamp_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        write_timestamp_V_ap_vld = 1'b1;
    end else begin
        write_timestamp_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign read_count_flag_V_lo_load_fu_185_p1 = read_count_flag_V;

assign read_latency_counter_1_fu_189_p2 = (read_latency_counter + 32'd1);

assign ret_V_1_fu_208_p2 = (rvalid_V & rready_V);

assign ret_V_2_fu_238_p2 = (wvalid_V & tmp_fu_232_p2);

assign ret_V_3_fu_272_p2 = (bvalid_V & bready_V);

assign ret_V_fu_174_p2 = (arvalid_V & arready_V);

assign tmp_4_fu_253_p2 = (write_latency_counte + 32'd1);

assign tmp_fu_232_p2 = (wready_V & wlast_V);

assign write_count_flag_V_l_load_fu_249_p1 = write_count_flag_V;

endmodule //axi_timestamper
