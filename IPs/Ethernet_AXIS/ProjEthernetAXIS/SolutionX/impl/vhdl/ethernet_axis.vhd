-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ethernet_axis is
port (
    data_in_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    data_in_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    data_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    data_out_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    data_out_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    fifo_in_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    fifo_in_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    fifo_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    fifo_out_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    fifo_out_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    fifo_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    fifo_in_TVALID : IN STD_LOGIC;
    fifo_in_TREADY : OUT STD_LOGIC;
    data_in_TVALID : IN STD_LOGIC;
    data_in_TREADY : OUT STD_LOGIC;
    data_out_TVALID : OUT STD_LOGIC;
    data_out_TREADY : IN STD_LOGIC;
    fifo_out_TVALID : OUT STD_LOGIC;
    fifo_out_TREADY : IN STD_LOGIC );
end;


architecture behav of ethernet_axis is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ethernet_axis,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcku040-ffva1156-2-e,HLS_INPUT_CLOCK=2.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=3.120500,HLS_SYN_LAT=5,HLS_SYN_TPT=1,HLS_SYN_MEM=7,HLS_SYN_DSP=0,HLS_SYN_FF=1272,HLS_SYN_LUT=1772,HLS_VERSION=2018_3}";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal rx_fifo_ip_U0_ap_start : STD_LOGIC;
    signal rx_fifo_ip_U0_ap_done : STD_LOGIC;
    signal rx_fifo_ip_U0_ap_continue : STD_LOGIC;
    signal rx_fifo_ip_U0_ap_idle : STD_LOGIC;
    signal rx_fifo_ip_U0_ap_ready : STD_LOGIC;
    signal rx_fifo_ip_U0_fifo_in_TREADY : STD_LOGIC;
    signal rx_fifo_ip_U0_rx_fifo_V_data_V_din : STD_LOGIC_VECTOR (63 downto 0);
    signal rx_fifo_ip_U0_rx_fifo_V_data_V_write : STD_LOGIC;
    signal rx_fifo_ip_U0_rx_fifo_V_keep_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal rx_fifo_ip_U0_rx_fifo_V_keep_V_write : STD_LOGIC;
    signal rx_fifo_ip_U0_rx_fifo_V_last_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal rx_fifo_ip_U0_rx_fifo_V_last_V_write : STD_LOGIC;
    signal ethernet_axis_ip_U0_ap_start : STD_LOGIC;
    signal ethernet_axis_ip_U0_ap_done : STD_LOGIC;
    signal ethernet_axis_ip_U0_ap_continue : STD_LOGIC;
    signal ethernet_axis_ip_U0_ap_idle : STD_LOGIC;
    signal ethernet_axis_ip_U0_ap_ready : STD_LOGIC;
    signal ethernet_axis_ip_U0_data_in_TREADY : STD_LOGIC;
    signal ethernet_axis_ip_U0_data_out_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal ethernet_axis_ip_U0_data_out_TVALID : STD_LOGIC;
    signal ethernet_axis_ip_U0_data_out_TKEEP : STD_LOGIC_VECTOR (7 downto 0);
    signal ethernet_axis_ip_U0_data_out_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal ethernet_axis_ip_U0_fifo_out_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal ethernet_axis_ip_U0_fifo_out_TVALID : STD_LOGIC;
    signal ethernet_axis_ip_U0_fifo_out_TKEEP : STD_LOGIC_VECTOR (7 downto 0);
    signal ethernet_axis_ip_U0_fifo_out_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal ethernet_axis_ip_U0_rx_fifo_V_data_V_read : STD_LOGIC;
    signal ethernet_axis_ip_U0_rx_fifo_V_keep_V_read : STD_LOGIC;
    signal ethernet_axis_ip_U0_rx_fifo_V_last_V_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal rx_fifo_V_data_V_full_n : STD_LOGIC;
    signal rx_fifo_V_data_V_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal rx_fifo_V_data_V_empty_n : STD_LOGIC;
    signal rx_fifo_V_keep_V_full_n : STD_LOGIC;
    signal rx_fifo_V_keep_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal rx_fifo_V_keep_V_empty_n : STD_LOGIC;
    signal rx_fifo_V_last_V_full_n : STD_LOGIC;
    signal rx_fifo_V_last_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal rx_fifo_V_last_V_empty_n : STD_LOGIC;
    signal rx_fifo_ip_U0_start_full_n : STD_LOGIC;
    signal rx_fifo_ip_U0_start_write : STD_LOGIC;
    signal ethernet_axis_ip_U0_start_full_n : STD_LOGIC;
    signal ethernet_axis_ip_U0_start_write : STD_LOGIC;

    component rx_fifo_ip IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fifo_in_TVALID : IN STD_LOGIC;
        fifo_in_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        fifo_in_TREADY : OUT STD_LOGIC;
        fifo_in_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
        fifo_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        rx_fifo_V_data_V_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        rx_fifo_V_data_V_full_n : IN STD_LOGIC;
        rx_fifo_V_data_V_write : OUT STD_LOGIC;
        rx_fifo_V_keep_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        rx_fifo_V_keep_V_full_n : IN STD_LOGIC;
        rx_fifo_V_keep_V_write : OUT STD_LOGIC;
        rx_fifo_V_last_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        rx_fifo_V_last_V_full_n : IN STD_LOGIC;
        rx_fifo_V_last_V_write : OUT STD_LOGIC );
    end component;


    component ethernet_axis_ip IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_in_TVALID : IN STD_LOGIC;
        data_out_TREADY : IN STD_LOGIC;
        fifo_out_TREADY : IN STD_LOGIC;
        data_in_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        data_in_TREADY : OUT STD_LOGIC;
        data_in_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
        data_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        data_out_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        data_out_TVALID : OUT STD_LOGIC;
        data_out_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
        data_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        fifo_out_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        fifo_out_TVALID : OUT STD_LOGIC;
        fifo_out_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
        fifo_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        rx_fifo_V_data_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        rx_fifo_V_data_V_empty_n : IN STD_LOGIC;
        rx_fifo_V_data_V_read : OUT STD_LOGIC;
        rx_fifo_V_keep_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        rx_fifo_V_keep_V_empty_n : IN STD_LOGIC;
        rx_fifo_V_keep_V_read : OUT STD_LOGIC;
        rx_fifo_V_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        rx_fifo_V_last_V_empty_n : IN STD_LOGIC;
        rx_fifo_V_last_V_read : OUT STD_LOGIC );
    end component;


    component fifo_w64_d512_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d512_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w1_d512_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    rx_fifo_ip_U0 : component rx_fifo_ip
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => rx_fifo_ip_U0_ap_start,
        ap_done => rx_fifo_ip_U0_ap_done,
        ap_continue => rx_fifo_ip_U0_ap_continue,
        ap_idle => rx_fifo_ip_U0_ap_idle,
        ap_ready => rx_fifo_ip_U0_ap_ready,
        fifo_in_TVALID => fifo_in_TVALID,
        fifo_in_TDATA => fifo_in_TDATA,
        fifo_in_TREADY => rx_fifo_ip_U0_fifo_in_TREADY,
        fifo_in_TKEEP => fifo_in_TKEEP,
        fifo_in_TLAST => fifo_in_TLAST,
        rx_fifo_V_data_V_din => rx_fifo_ip_U0_rx_fifo_V_data_V_din,
        rx_fifo_V_data_V_full_n => rx_fifo_V_data_V_full_n,
        rx_fifo_V_data_V_write => rx_fifo_ip_U0_rx_fifo_V_data_V_write,
        rx_fifo_V_keep_V_din => rx_fifo_ip_U0_rx_fifo_V_keep_V_din,
        rx_fifo_V_keep_V_full_n => rx_fifo_V_keep_V_full_n,
        rx_fifo_V_keep_V_write => rx_fifo_ip_U0_rx_fifo_V_keep_V_write,
        rx_fifo_V_last_V_din => rx_fifo_ip_U0_rx_fifo_V_last_V_din,
        rx_fifo_V_last_V_full_n => rx_fifo_V_last_V_full_n,
        rx_fifo_V_last_V_write => rx_fifo_ip_U0_rx_fifo_V_last_V_write);

    ethernet_axis_ip_U0 : component ethernet_axis_ip
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ethernet_axis_ip_U0_ap_start,
        ap_done => ethernet_axis_ip_U0_ap_done,
        ap_continue => ethernet_axis_ip_U0_ap_continue,
        ap_idle => ethernet_axis_ip_U0_ap_idle,
        ap_ready => ethernet_axis_ip_U0_ap_ready,
        data_in_TVALID => data_in_TVALID,
        data_out_TREADY => data_out_TREADY,
        fifo_out_TREADY => fifo_out_TREADY,
        data_in_TDATA => data_in_TDATA,
        data_in_TREADY => ethernet_axis_ip_U0_data_in_TREADY,
        data_in_TKEEP => data_in_TKEEP,
        data_in_TLAST => data_in_TLAST,
        data_out_TDATA => ethernet_axis_ip_U0_data_out_TDATA,
        data_out_TVALID => ethernet_axis_ip_U0_data_out_TVALID,
        data_out_TKEEP => ethernet_axis_ip_U0_data_out_TKEEP,
        data_out_TLAST => ethernet_axis_ip_U0_data_out_TLAST,
        fifo_out_TDATA => ethernet_axis_ip_U0_fifo_out_TDATA,
        fifo_out_TVALID => ethernet_axis_ip_U0_fifo_out_TVALID,
        fifo_out_TKEEP => ethernet_axis_ip_U0_fifo_out_TKEEP,
        fifo_out_TLAST => ethernet_axis_ip_U0_fifo_out_TLAST,
        rx_fifo_V_data_V_dout => rx_fifo_V_data_V_dout,
        rx_fifo_V_data_V_empty_n => rx_fifo_V_data_V_empty_n,
        rx_fifo_V_data_V_read => ethernet_axis_ip_U0_rx_fifo_V_data_V_read,
        rx_fifo_V_keep_V_dout => rx_fifo_V_keep_V_dout,
        rx_fifo_V_keep_V_empty_n => rx_fifo_V_keep_V_empty_n,
        rx_fifo_V_keep_V_read => ethernet_axis_ip_U0_rx_fifo_V_keep_V_read,
        rx_fifo_V_last_V_dout => rx_fifo_V_last_V_dout,
        rx_fifo_V_last_V_empty_n => rx_fifo_V_last_V_empty_n,
        rx_fifo_V_last_V_read => ethernet_axis_ip_U0_rx_fifo_V_last_V_read);

    rx_fifo_V_data_V_U : component fifo_w64_d512_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => rx_fifo_ip_U0_rx_fifo_V_data_V_din,
        if_full_n => rx_fifo_V_data_V_full_n,
        if_write => rx_fifo_ip_U0_rx_fifo_V_data_V_write,
        if_dout => rx_fifo_V_data_V_dout,
        if_empty_n => rx_fifo_V_data_V_empty_n,
        if_read => ethernet_axis_ip_U0_rx_fifo_V_data_V_read);

    rx_fifo_V_keep_V_U : component fifo_w8_d512_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => rx_fifo_ip_U0_rx_fifo_V_keep_V_din,
        if_full_n => rx_fifo_V_keep_V_full_n,
        if_write => rx_fifo_ip_U0_rx_fifo_V_keep_V_write,
        if_dout => rx_fifo_V_keep_V_dout,
        if_empty_n => rx_fifo_V_keep_V_empty_n,
        if_read => ethernet_axis_ip_U0_rx_fifo_V_keep_V_read);

    rx_fifo_V_last_V_U : component fifo_w1_d512_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => rx_fifo_ip_U0_rx_fifo_V_last_V_din,
        if_full_n => rx_fifo_V_last_V_full_n,
        if_write => rx_fifo_ip_U0_rx_fifo_V_last_V_write,
        if_dout => rx_fifo_V_last_V_dout,
        if_empty_n => rx_fifo_V_last_V_empty_n,
        if_read => ethernet_axis_ip_U0_rx_fifo_V_last_V_read);





    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_0;
    data_in_TREADY <= ethernet_axis_ip_U0_data_in_TREADY;
    data_out_TDATA <= ethernet_axis_ip_U0_data_out_TDATA;
    data_out_TKEEP <= ethernet_axis_ip_U0_data_out_TKEEP;
    data_out_TLAST <= ethernet_axis_ip_U0_data_out_TLAST;
    data_out_TVALID <= ethernet_axis_ip_U0_data_out_TVALID;
    ethernet_axis_ip_U0_ap_continue <= ap_const_logic_1;
    ethernet_axis_ip_U0_ap_start <= ap_const_logic_1;
    ethernet_axis_ip_U0_start_full_n <= ap_const_logic_1;
    ethernet_axis_ip_U0_start_write <= ap_const_logic_0;
    fifo_in_TREADY <= rx_fifo_ip_U0_fifo_in_TREADY;
    fifo_out_TDATA <= ethernet_axis_ip_U0_fifo_out_TDATA;
    fifo_out_TKEEP <= ethernet_axis_ip_U0_fifo_out_TKEEP;
    fifo_out_TLAST <= ethernet_axis_ip_U0_fifo_out_TLAST;
    fifo_out_TVALID <= ethernet_axis_ip_U0_fifo_out_TVALID;
    rx_fifo_ip_U0_ap_continue <= ap_const_logic_1;
    rx_fifo_ip_U0_ap_start <= ap_const_logic_1;
    rx_fifo_ip_U0_start_full_n <= ap_const_logic_1;
    rx_fifo_ip_U0_start_write <= ap_const_logic_0;
end behav;
