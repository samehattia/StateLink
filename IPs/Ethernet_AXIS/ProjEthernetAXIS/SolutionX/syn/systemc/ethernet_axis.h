// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _ethernet_axis_HH_
#define _ethernet_axis_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "rx_fifo_ip.h"
#include "ethernet_axis_ip.h"
#include "fifo_w64_d512_A.h"
#include "fifo_w8_d512_A.h"
#include "fifo_w1_d512_A.h"

namespace ap_rtl {

struct ethernet_axis : public sc_module {
    // Port declarations 22
    sc_in< sc_lv<64> > data_in_TDATA;
    sc_in< sc_lv<8> > data_in_TKEEP;
    sc_in< sc_lv<1> > data_in_TLAST;
    sc_out< sc_lv<64> > data_out_TDATA;
    sc_out< sc_lv<8> > data_out_TKEEP;
    sc_out< sc_lv<1> > data_out_TLAST;
    sc_in< sc_lv<64> > fifo_in_TDATA;
    sc_in< sc_lv<8> > fifo_in_TKEEP;
    sc_in< sc_lv<1> > fifo_in_TLAST;
    sc_out< sc_lv<64> > fifo_out_TDATA;
    sc_out< sc_lv<8> > fifo_out_TKEEP;
    sc_out< sc_lv<1> > fifo_out_TLAST;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > fifo_in_TVALID;
    sc_out< sc_logic > fifo_in_TREADY;
    sc_in< sc_logic > data_in_TVALID;
    sc_out< sc_logic > data_in_TREADY;
    sc_out< sc_logic > data_out_TVALID;
    sc_in< sc_logic > data_out_TREADY;
    sc_out< sc_logic > fifo_out_TVALID;
    sc_in< sc_logic > fifo_out_TREADY;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    ethernet_axis(sc_module_name name);
    SC_HAS_PROCESS(ethernet_axis);

    ~ethernet_axis();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    rx_fifo_ip* rx_fifo_ip_U0;
    ethernet_axis_ip* ethernet_axis_ip_U0;
    fifo_w64_d512_A* rx_fifo_V_data_V_U;
    fifo_w8_d512_A* rx_fifo_V_keep_V_U;
    fifo_w1_d512_A* rx_fifo_V_last_V_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > rx_fifo_ip_U0_ap_start;
    sc_signal< sc_logic > rx_fifo_ip_U0_ap_done;
    sc_signal< sc_logic > rx_fifo_ip_U0_ap_continue;
    sc_signal< sc_logic > rx_fifo_ip_U0_ap_idle;
    sc_signal< sc_logic > rx_fifo_ip_U0_ap_ready;
    sc_signal< sc_logic > rx_fifo_ip_U0_fifo_in_TREADY;
    sc_signal< sc_lv<64> > rx_fifo_ip_U0_rx_fifo_V_data_V_din;
    sc_signal< sc_logic > rx_fifo_ip_U0_rx_fifo_V_data_V_write;
    sc_signal< sc_lv<8> > rx_fifo_ip_U0_rx_fifo_V_keep_V_din;
    sc_signal< sc_logic > rx_fifo_ip_U0_rx_fifo_V_keep_V_write;
    sc_signal< sc_lv<1> > rx_fifo_ip_U0_rx_fifo_V_last_V_din;
    sc_signal< sc_logic > rx_fifo_ip_U0_rx_fifo_V_last_V_write;
    sc_signal< sc_logic > ethernet_axis_ip_U0_ap_start;
    sc_signal< sc_logic > ethernet_axis_ip_U0_ap_done;
    sc_signal< sc_logic > ethernet_axis_ip_U0_ap_continue;
    sc_signal< sc_logic > ethernet_axis_ip_U0_ap_idle;
    sc_signal< sc_logic > ethernet_axis_ip_U0_ap_ready;
    sc_signal< sc_logic > ethernet_axis_ip_U0_data_in_TREADY;
    sc_signal< sc_lv<64> > ethernet_axis_ip_U0_data_out_TDATA;
    sc_signal< sc_logic > ethernet_axis_ip_U0_data_out_TVALID;
    sc_signal< sc_lv<8> > ethernet_axis_ip_U0_data_out_TKEEP;
    sc_signal< sc_lv<1> > ethernet_axis_ip_U0_data_out_TLAST;
    sc_signal< sc_lv<64> > ethernet_axis_ip_U0_fifo_out_TDATA;
    sc_signal< sc_logic > ethernet_axis_ip_U0_fifo_out_TVALID;
    sc_signal< sc_lv<8> > ethernet_axis_ip_U0_fifo_out_TKEEP;
    sc_signal< sc_lv<1> > ethernet_axis_ip_U0_fifo_out_TLAST;
    sc_signal< sc_logic > ethernet_axis_ip_U0_rx_fifo_V_data_V_read;
    sc_signal< sc_logic > ethernet_axis_ip_U0_rx_fifo_V_keep_V_read;
    sc_signal< sc_logic > ethernet_axis_ip_U0_rx_fifo_V_last_V_read;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > rx_fifo_V_data_V_full_n;
    sc_signal< sc_lv<64> > rx_fifo_V_data_V_dout;
    sc_signal< sc_logic > rx_fifo_V_data_V_empty_n;
    sc_signal< sc_logic > rx_fifo_V_keep_V_full_n;
    sc_signal< sc_lv<8> > rx_fifo_V_keep_V_dout;
    sc_signal< sc_logic > rx_fifo_V_keep_V_empty_n;
    sc_signal< sc_logic > rx_fifo_V_last_V_full_n;
    sc_signal< sc_lv<1> > rx_fifo_V_last_V_dout;
    sc_signal< sc_logic > rx_fifo_V_last_V_empty_n;
    sc_signal< sc_logic > rx_fifo_ip_U0_start_full_n;
    sc_signal< sc_logic > rx_fifo_ip_U0_start_write;
    sc_signal< sc_logic > ethernet_axis_ip_U0_start_full_n;
    sc_signal< sc_logic > ethernet_axis_ip_U0_start_write;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_rst_n_inv();
    void thread_ap_sync_continue();
    void thread_data_in_TREADY();
    void thread_data_out_TDATA();
    void thread_data_out_TKEEP();
    void thread_data_out_TLAST();
    void thread_data_out_TVALID();
    void thread_ethernet_axis_ip_U0_ap_continue();
    void thread_ethernet_axis_ip_U0_ap_start();
    void thread_ethernet_axis_ip_U0_start_full_n();
    void thread_ethernet_axis_ip_U0_start_write();
    void thread_fifo_in_TREADY();
    void thread_fifo_out_TDATA();
    void thread_fifo_out_TKEEP();
    void thread_fifo_out_TLAST();
    void thread_fifo_out_TVALID();
    void thread_rx_fifo_ip_U0_ap_continue();
    void thread_rx_fifo_ip_U0_ap_start();
    void thread_rx_fifo_ip_U0_start_full_n();
    void thread_rx_fifo_ip_U0_start_write();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
