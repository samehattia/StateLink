// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "rx_fifo_ip.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic rx_fifo_ip::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic rx_fifo_ip::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> rx_fifo_ip::ap_ST_fsm_pp0_stage0 = "1";
const sc_lv<32> rx_fifo_ip::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool rx_fifo_ip::ap_const_boolean_1 = true;
const sc_lv<1> rx_fifo_ip::ap_const_lv1_1 = "1";
const bool rx_fifo_ip::ap_const_boolean_0 = false;

rx_fifo_ip::rx_fifo_ip(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( fifo_in_TVALID );
    sensitive << ( tmp_nbreadreq_fu_38_p5 );
    sensitive << ( rx_fifo_V_data_V1_status );
    sensitive << ( tmp_reg_85 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( fifo_in_TVALID );
    sensitive << ( tmp_nbreadreq_fu_38_p5 );
    sensitive << ( rx_fifo_V_data_V1_status );
    sensitive << ( tmp_reg_85 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( fifo_in_TVALID );
    sensitive << ( tmp_nbreadreq_fu_38_p5 );
    sensitive << ( rx_fifo_V_data_V1_status );
    sensitive << ( tmp_reg_85 );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( fifo_in_TVALID );
    sensitive << ( tmp_nbreadreq_fu_38_p5 );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);
    sensitive << ( rx_fifo_V_data_V1_status );
    sensitive << ( tmp_reg_85 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_idle_pp0_0to0);
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to0 );

    SC_METHOD(thread_fifo_in_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( fifo_in_TVALID );
    sensitive << ( tmp_nbreadreq_fu_38_p5 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_fifo_in_TREADY);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_nbreadreq_fu_38_p5 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_rx_fifo_V_data_V1_status);
    sensitive << ( rx_fifo_V_data_V_full_n );
    sensitive << ( rx_fifo_V_keep_V_full_n );
    sensitive << ( rx_fifo_V_last_V_full_n );

    SC_METHOD(thread_rx_fifo_V_data_V1_update);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_85 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_rx_fifo_V_data_V_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_85 );
    sensitive << ( rx_fifo_V_data_V_full_n );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_rx_fifo_V_data_V_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_85 );
    sensitive << ( tmp_data_V_reg_89 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_rx_fifo_V_data_V_write);
    sensitive << ( rx_fifo_V_data_V1_update );

    SC_METHOD(thread_rx_fifo_V_keep_V_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_85 );
    sensitive << ( rx_fifo_V_keep_V_full_n );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_rx_fifo_V_keep_V_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_85 );
    sensitive << ( tmp_keep_V_reg_94 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_rx_fifo_V_keep_V_write);
    sensitive << ( rx_fifo_V_data_V1_update );

    SC_METHOD(thread_rx_fifo_V_last_V_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_85 );
    sensitive << ( rx_fifo_V_last_V_full_n );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_rx_fifo_V_last_V_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_85 );
    sensitive << ( tmp_last_V_reg_99 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_rx_fifo_V_last_V_write);
    sensitive << ( rx_fifo_V_data_V1_update );

    SC_METHOD(thread_tmp_nbreadreq_fu_38_p5);
    sensitive << ( fifo_in_TVALID );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "rx_fifo_ip_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, fifo_in_TVALID, "(port)fifo_in_TVALID");
    sc_trace(mVcdFile, fifo_in_TDATA, "(port)fifo_in_TDATA");
    sc_trace(mVcdFile, fifo_in_TREADY, "(port)fifo_in_TREADY");
    sc_trace(mVcdFile, fifo_in_TKEEP, "(port)fifo_in_TKEEP");
    sc_trace(mVcdFile, fifo_in_TLAST, "(port)fifo_in_TLAST");
    sc_trace(mVcdFile, rx_fifo_V_data_V_din, "(port)rx_fifo_V_data_V_din");
    sc_trace(mVcdFile, rx_fifo_V_data_V_full_n, "(port)rx_fifo_V_data_V_full_n");
    sc_trace(mVcdFile, rx_fifo_V_data_V_write, "(port)rx_fifo_V_data_V_write");
    sc_trace(mVcdFile, rx_fifo_V_keep_V_din, "(port)rx_fifo_V_keep_V_din");
    sc_trace(mVcdFile, rx_fifo_V_keep_V_full_n, "(port)rx_fifo_V_keep_V_full_n");
    sc_trace(mVcdFile, rx_fifo_V_keep_V_write, "(port)rx_fifo_V_keep_V_write");
    sc_trace(mVcdFile, rx_fifo_V_last_V_din, "(port)rx_fifo_V_last_V_din");
    sc_trace(mVcdFile, rx_fifo_V_last_V_full_n, "(port)rx_fifo_V_last_V_full_n");
    sc_trace(mVcdFile, rx_fifo_V_last_V_write, "(port)rx_fifo_V_last_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, tmp_nbreadreq_fu_38_p5, "tmp_nbreadreq_fu_38_p5");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, rx_fifo_V_data_V1_status, "rx_fifo_V_data_V1_status");
    sc_trace(mVcdFile, tmp_reg_85, "tmp_reg_85");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, fifo_in_TDATA_blk_n, "fifo_in_TDATA_blk_n");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, rx_fifo_V_data_V_blk_n, "rx_fifo_V_data_V_blk_n");
    sc_trace(mVcdFile, rx_fifo_V_keep_V_blk_n, "rx_fifo_V_keep_V_blk_n");
    sc_trace(mVcdFile, rx_fifo_V_last_V_blk_n, "rx_fifo_V_last_V_blk_n");
    sc_trace(mVcdFile, tmp_data_V_reg_89, "tmp_data_V_reg_89");
    sc_trace(mVcdFile, tmp_keep_V_reg_94, "tmp_keep_V_reg_94");
    sc_trace(mVcdFile, tmp_last_V_reg_99, "tmp_last_V_reg_99");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, rx_fifo_V_data_V1_update, "rx_fifo_V_data_V1_update");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to0, "ap_idle_pp0_0to0");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

rx_fifo_ip::~rx_fifo_ip() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void rx_fifo_ip::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(tmp_nbreadreq_fu_38_p5.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_data_V_reg_89 = fifo_in_TDATA.read();
        tmp_keep_V_reg_94 = fifo_in_TKEEP.read();
        tmp_last_V_reg_99 = fifo_in_TLAST.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_reg_85 = tmp_nbreadreq_fu_38_p5.read();
    }
}

void rx_fifo_ip::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void rx_fifo_ip::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void rx_fifo_ip::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, fifo_in_TVALID.read()) && 
    esl_seteq<1,1,1>(tmp_nbreadreq_fu_38_p5.read(), ap_const_lv1_1)) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (esl_seteq<1,1,1>(ap_const_logic_0, rx_fifo_V_data_V1_status.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_85.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())));
}

void rx_fifo_ip::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, fifo_in_TVALID.read()) && 
    esl_seteq<1,1,1>(tmp_nbreadreq_fu_38_p5.read(), ap_const_lv1_1)) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (esl_seteq<1,1,1>(ap_const_logic_0, rx_fifo_V_data_V1_status.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_85.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())));
}

void rx_fifo_ip::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, fifo_in_TVALID.read()) && 
    esl_seteq<1,1,1>(tmp_nbreadreq_fu_38_p5.read(), ap_const_lv1_1)) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (esl_seteq<1,1,1>(ap_const_logic_0, rx_fifo_V_data_V1_status.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_85.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())));
}

void rx_fifo_ip::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, fifo_in_TVALID.read()) && 
  esl_seteq<1,1,1>(tmp_nbreadreq_fu_38_p5.read(), ap_const_lv1_1)) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void rx_fifo_ip::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_logic_0, rx_fifo_V_data_V1_status.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_85.read()));
}

void rx_fifo_ip::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void rx_fifo_ip::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void rx_fifo_ip::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void rx_fifo_ip::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void rx_fifo_ip::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void rx_fifo_ip::thread_ap_idle_pp0_0to0() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read())) {
        ap_idle_pp0_0to0 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to0 = ap_const_logic_0;
    }
}

void rx_fifo_ip::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void rx_fifo_ip::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to0.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void rx_fifo_ip::thread_fifo_in_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(tmp_nbreadreq_fu_38_p5.read(), ap_const_lv1_1) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        fifo_in_TDATA_blk_n = fifo_in_TVALID.read();
    } else {
        fifo_in_TDATA_blk_n = ap_const_logic_1;
    }
}

void rx_fifo_ip::thread_fifo_in_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(tmp_nbreadreq_fu_38_p5.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        fifo_in_TREADY = ap_const_logic_1;
    } else {
        fifo_in_TREADY = ap_const_logic_0;
    }
}

void rx_fifo_ip::thread_rx_fifo_V_data_V1_status() {
    rx_fifo_V_data_V1_status = (rx_fifo_V_data_V_full_n.read() & rx_fifo_V_keep_V_full_n.read() & rx_fifo_V_last_V_full_n.read());
}

void rx_fifo_ip::thread_rx_fifo_V_data_V1_update() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_85.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        rx_fifo_V_data_V1_update = ap_const_logic_1;
    } else {
        rx_fifo_V_data_V1_update = ap_const_logic_0;
    }
}

void rx_fifo_ip::thread_rx_fifo_V_data_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_85.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        rx_fifo_V_data_V_blk_n = rx_fifo_V_data_V_full_n.read();
    } else {
        rx_fifo_V_data_V_blk_n = ap_const_logic_1;
    }
}

void rx_fifo_ip::thread_rx_fifo_V_data_V_din() {
    rx_fifo_V_data_V_din = tmp_data_V_reg_89.read();
}

void rx_fifo_ip::thread_rx_fifo_V_data_V_write() {
    rx_fifo_V_data_V_write = rx_fifo_V_data_V1_update.read();
}

void rx_fifo_ip::thread_rx_fifo_V_keep_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_85.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        rx_fifo_V_keep_V_blk_n = rx_fifo_V_keep_V_full_n.read();
    } else {
        rx_fifo_V_keep_V_blk_n = ap_const_logic_1;
    }
}

void rx_fifo_ip::thread_rx_fifo_V_keep_V_din() {
    rx_fifo_V_keep_V_din = tmp_keep_V_reg_94.read();
}

void rx_fifo_ip::thread_rx_fifo_V_keep_V_write() {
    rx_fifo_V_keep_V_write = rx_fifo_V_data_V1_update.read();
}

void rx_fifo_ip::thread_rx_fifo_V_last_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_85.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        rx_fifo_V_last_V_blk_n = rx_fifo_V_last_V_full_n.read();
    } else {
        rx_fifo_V_last_V_blk_n = ap_const_logic_1;
    }
}

void rx_fifo_ip::thread_rx_fifo_V_last_V_din() {
    rx_fifo_V_last_V_din = tmp_last_V_reg_99.read();
}

void rx_fifo_ip::thread_rx_fifo_V_last_V_write() {
    rx_fifo_V_last_V_write = rx_fifo_V_data_V1_update.read();
}

void rx_fifo_ip::thread_tmp_nbreadreq_fu_38_p5() {
    tmp_nbreadreq_fu_38_p5 =  (sc_lv<1>) ((fifo_in_TVALID.read()));
}

void rx_fifo_ip::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

