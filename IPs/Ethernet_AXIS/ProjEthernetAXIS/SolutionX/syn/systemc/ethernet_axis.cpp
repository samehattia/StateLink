// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "ethernet_axis.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_lv<64> ethernet_axis::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<8> ethernet_axis::ap_const_lv8_0 = "00000000";
const sc_lv<1> ethernet_axis::ap_const_lv1_0 = "0";
const sc_logic ethernet_axis::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic ethernet_axis::ap_const_logic_0 = sc_dt::Log_0;

ethernet_axis::ethernet_axis(sc_module_name name) : sc_module(name), mVcdFile(0) {
    rx_fifo_ip_U0 = new rx_fifo_ip("rx_fifo_ip_U0");
    rx_fifo_ip_U0->ap_clk(ap_clk);
    rx_fifo_ip_U0->ap_rst(ap_rst_n_inv);
    rx_fifo_ip_U0->ap_start(rx_fifo_ip_U0_ap_start);
    rx_fifo_ip_U0->ap_done(rx_fifo_ip_U0_ap_done);
    rx_fifo_ip_U0->ap_continue(rx_fifo_ip_U0_ap_continue);
    rx_fifo_ip_U0->ap_idle(rx_fifo_ip_U0_ap_idle);
    rx_fifo_ip_U0->ap_ready(rx_fifo_ip_U0_ap_ready);
    rx_fifo_ip_U0->fifo_in_TVALID(fifo_in_TVALID);
    rx_fifo_ip_U0->fifo_in_TDATA(fifo_in_TDATA);
    rx_fifo_ip_U0->fifo_in_TREADY(rx_fifo_ip_U0_fifo_in_TREADY);
    rx_fifo_ip_U0->fifo_in_TKEEP(fifo_in_TKEEP);
    rx_fifo_ip_U0->fifo_in_TLAST(fifo_in_TLAST);
    rx_fifo_ip_U0->rx_fifo_V_data_V_din(rx_fifo_ip_U0_rx_fifo_V_data_V_din);
    rx_fifo_ip_U0->rx_fifo_V_data_V_full_n(rx_fifo_V_data_V_full_n);
    rx_fifo_ip_U0->rx_fifo_V_data_V_write(rx_fifo_ip_U0_rx_fifo_V_data_V_write);
    rx_fifo_ip_U0->rx_fifo_V_keep_V_din(rx_fifo_ip_U0_rx_fifo_V_keep_V_din);
    rx_fifo_ip_U0->rx_fifo_V_keep_V_full_n(rx_fifo_V_keep_V_full_n);
    rx_fifo_ip_U0->rx_fifo_V_keep_V_write(rx_fifo_ip_U0_rx_fifo_V_keep_V_write);
    rx_fifo_ip_U0->rx_fifo_V_last_V_din(rx_fifo_ip_U0_rx_fifo_V_last_V_din);
    rx_fifo_ip_U0->rx_fifo_V_last_V_full_n(rx_fifo_V_last_V_full_n);
    rx_fifo_ip_U0->rx_fifo_V_last_V_write(rx_fifo_ip_U0_rx_fifo_V_last_V_write);
    ethernet_axis_ip_U0 = new ethernet_axis_ip("ethernet_axis_ip_U0");
    ethernet_axis_ip_U0->ap_clk(ap_clk);
    ethernet_axis_ip_U0->ap_rst(ap_rst_n_inv);
    ethernet_axis_ip_U0->ap_start(ethernet_axis_ip_U0_ap_start);
    ethernet_axis_ip_U0->ap_done(ethernet_axis_ip_U0_ap_done);
    ethernet_axis_ip_U0->ap_continue(ethernet_axis_ip_U0_ap_continue);
    ethernet_axis_ip_U0->ap_idle(ethernet_axis_ip_U0_ap_idle);
    ethernet_axis_ip_U0->ap_ready(ethernet_axis_ip_U0_ap_ready);
    ethernet_axis_ip_U0->data_in_TVALID(data_in_TVALID);
    ethernet_axis_ip_U0->data_out_TREADY(data_out_TREADY);
    ethernet_axis_ip_U0->fifo_out_TREADY(fifo_out_TREADY);
    ethernet_axis_ip_U0->data_in_TDATA(data_in_TDATA);
    ethernet_axis_ip_U0->data_in_TREADY(ethernet_axis_ip_U0_data_in_TREADY);
    ethernet_axis_ip_U0->data_in_TKEEP(data_in_TKEEP);
    ethernet_axis_ip_U0->data_in_TLAST(data_in_TLAST);
    ethernet_axis_ip_U0->data_out_TDATA(ethernet_axis_ip_U0_data_out_TDATA);
    ethernet_axis_ip_U0->data_out_TVALID(ethernet_axis_ip_U0_data_out_TVALID);
    ethernet_axis_ip_U0->data_out_TKEEP(ethernet_axis_ip_U0_data_out_TKEEP);
    ethernet_axis_ip_U0->data_out_TLAST(ethernet_axis_ip_U0_data_out_TLAST);
    ethernet_axis_ip_U0->fifo_out_TDATA(ethernet_axis_ip_U0_fifo_out_TDATA);
    ethernet_axis_ip_U0->fifo_out_TVALID(ethernet_axis_ip_U0_fifo_out_TVALID);
    ethernet_axis_ip_U0->fifo_out_TKEEP(ethernet_axis_ip_U0_fifo_out_TKEEP);
    ethernet_axis_ip_U0->fifo_out_TLAST(ethernet_axis_ip_U0_fifo_out_TLAST);
    ethernet_axis_ip_U0->rx_fifo_V_data_V_dout(rx_fifo_V_data_V_dout);
    ethernet_axis_ip_U0->rx_fifo_V_data_V_empty_n(rx_fifo_V_data_V_empty_n);
    ethernet_axis_ip_U0->rx_fifo_V_data_V_read(ethernet_axis_ip_U0_rx_fifo_V_data_V_read);
    ethernet_axis_ip_U0->rx_fifo_V_keep_V_dout(rx_fifo_V_keep_V_dout);
    ethernet_axis_ip_U0->rx_fifo_V_keep_V_empty_n(rx_fifo_V_keep_V_empty_n);
    ethernet_axis_ip_U0->rx_fifo_V_keep_V_read(ethernet_axis_ip_U0_rx_fifo_V_keep_V_read);
    ethernet_axis_ip_U0->rx_fifo_V_last_V_dout(rx_fifo_V_last_V_dout);
    ethernet_axis_ip_U0->rx_fifo_V_last_V_empty_n(rx_fifo_V_last_V_empty_n);
    ethernet_axis_ip_U0->rx_fifo_V_last_V_read(ethernet_axis_ip_U0_rx_fifo_V_last_V_read);
    rx_fifo_V_data_V_U = new fifo_w64_d512_A("rx_fifo_V_data_V_U");
    rx_fifo_V_data_V_U->clk(ap_clk);
    rx_fifo_V_data_V_U->reset(ap_rst_n_inv);
    rx_fifo_V_data_V_U->if_read_ce(ap_var_for_const0);
    rx_fifo_V_data_V_U->if_write_ce(ap_var_for_const0);
    rx_fifo_V_data_V_U->if_din(rx_fifo_ip_U0_rx_fifo_V_data_V_din);
    rx_fifo_V_data_V_U->if_full_n(rx_fifo_V_data_V_full_n);
    rx_fifo_V_data_V_U->if_write(rx_fifo_ip_U0_rx_fifo_V_data_V_write);
    rx_fifo_V_data_V_U->if_dout(rx_fifo_V_data_V_dout);
    rx_fifo_V_data_V_U->if_empty_n(rx_fifo_V_data_V_empty_n);
    rx_fifo_V_data_V_U->if_read(ethernet_axis_ip_U0_rx_fifo_V_data_V_read);
    rx_fifo_V_keep_V_U = new fifo_w8_d512_A("rx_fifo_V_keep_V_U");
    rx_fifo_V_keep_V_U->clk(ap_clk);
    rx_fifo_V_keep_V_U->reset(ap_rst_n_inv);
    rx_fifo_V_keep_V_U->if_read_ce(ap_var_for_const0);
    rx_fifo_V_keep_V_U->if_write_ce(ap_var_for_const0);
    rx_fifo_V_keep_V_U->if_din(rx_fifo_ip_U0_rx_fifo_V_keep_V_din);
    rx_fifo_V_keep_V_U->if_full_n(rx_fifo_V_keep_V_full_n);
    rx_fifo_V_keep_V_U->if_write(rx_fifo_ip_U0_rx_fifo_V_keep_V_write);
    rx_fifo_V_keep_V_U->if_dout(rx_fifo_V_keep_V_dout);
    rx_fifo_V_keep_V_U->if_empty_n(rx_fifo_V_keep_V_empty_n);
    rx_fifo_V_keep_V_U->if_read(ethernet_axis_ip_U0_rx_fifo_V_keep_V_read);
    rx_fifo_V_last_V_U = new fifo_w1_d512_A("rx_fifo_V_last_V_U");
    rx_fifo_V_last_V_U->clk(ap_clk);
    rx_fifo_V_last_V_U->reset(ap_rst_n_inv);
    rx_fifo_V_last_V_U->if_read_ce(ap_var_for_const0);
    rx_fifo_V_last_V_U->if_write_ce(ap_var_for_const0);
    rx_fifo_V_last_V_U->if_din(rx_fifo_ip_U0_rx_fifo_V_last_V_din);
    rx_fifo_V_last_V_U->if_full_n(rx_fifo_V_last_V_full_n);
    rx_fifo_V_last_V_U->if_write(rx_fifo_ip_U0_rx_fifo_V_last_V_write);
    rx_fifo_V_last_V_U->if_dout(rx_fifo_V_last_V_dout);
    rx_fifo_V_last_V_U->if_empty_n(rx_fifo_V_last_V_empty_n);
    rx_fifo_V_last_V_U->if_read(ethernet_axis_ip_U0_rx_fifo_V_last_V_read);

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_data_in_TREADY);
    sensitive << ( ethernet_axis_ip_U0_data_in_TREADY );

    SC_METHOD(thread_data_out_TDATA);
    sensitive << ( ethernet_axis_ip_U0_data_out_TDATA );

    SC_METHOD(thread_data_out_TKEEP);
    sensitive << ( ethernet_axis_ip_U0_data_out_TKEEP );

    SC_METHOD(thread_data_out_TLAST);
    sensitive << ( ethernet_axis_ip_U0_data_out_TLAST );

    SC_METHOD(thread_data_out_TVALID);
    sensitive << ( ethernet_axis_ip_U0_data_out_TVALID );

    SC_METHOD(thread_ethernet_axis_ip_U0_ap_continue);

    SC_METHOD(thread_ethernet_axis_ip_U0_ap_start);

    SC_METHOD(thread_ethernet_axis_ip_U0_start_full_n);

    SC_METHOD(thread_ethernet_axis_ip_U0_start_write);

    SC_METHOD(thread_fifo_in_TREADY);
    sensitive << ( rx_fifo_ip_U0_fifo_in_TREADY );

    SC_METHOD(thread_fifo_out_TDATA);
    sensitive << ( ethernet_axis_ip_U0_fifo_out_TDATA );

    SC_METHOD(thread_fifo_out_TKEEP);
    sensitive << ( ethernet_axis_ip_U0_fifo_out_TKEEP );

    SC_METHOD(thread_fifo_out_TLAST);
    sensitive << ( ethernet_axis_ip_U0_fifo_out_TLAST );

    SC_METHOD(thread_fifo_out_TVALID);
    sensitive << ( ethernet_axis_ip_U0_fifo_out_TVALID );

    SC_METHOD(thread_rx_fifo_ip_U0_ap_continue);

    SC_METHOD(thread_rx_fifo_ip_U0_ap_start);

    SC_METHOD(thread_rx_fifo_ip_U0_start_full_n);

    SC_METHOD(thread_rx_fifo_ip_U0_start_write);

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "ethernet_axis_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, data_in_TDATA, "(port)data_in_TDATA");
    sc_trace(mVcdFile, data_in_TKEEP, "(port)data_in_TKEEP");
    sc_trace(mVcdFile, data_in_TLAST, "(port)data_in_TLAST");
    sc_trace(mVcdFile, data_out_TDATA, "(port)data_out_TDATA");
    sc_trace(mVcdFile, data_out_TKEEP, "(port)data_out_TKEEP");
    sc_trace(mVcdFile, data_out_TLAST, "(port)data_out_TLAST");
    sc_trace(mVcdFile, fifo_in_TDATA, "(port)fifo_in_TDATA");
    sc_trace(mVcdFile, fifo_in_TKEEP, "(port)fifo_in_TKEEP");
    sc_trace(mVcdFile, fifo_in_TLAST, "(port)fifo_in_TLAST");
    sc_trace(mVcdFile, fifo_out_TDATA, "(port)fifo_out_TDATA");
    sc_trace(mVcdFile, fifo_out_TKEEP, "(port)fifo_out_TKEEP");
    sc_trace(mVcdFile, fifo_out_TLAST, "(port)fifo_out_TLAST");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, fifo_in_TVALID, "(port)fifo_in_TVALID");
    sc_trace(mVcdFile, fifo_in_TREADY, "(port)fifo_in_TREADY");
    sc_trace(mVcdFile, data_in_TVALID, "(port)data_in_TVALID");
    sc_trace(mVcdFile, data_in_TREADY, "(port)data_in_TREADY");
    sc_trace(mVcdFile, data_out_TVALID, "(port)data_out_TVALID");
    sc_trace(mVcdFile, data_out_TREADY, "(port)data_out_TREADY");
    sc_trace(mVcdFile, fifo_out_TVALID, "(port)fifo_out_TVALID");
    sc_trace(mVcdFile, fifo_out_TREADY, "(port)fifo_out_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, rx_fifo_ip_U0_ap_start, "rx_fifo_ip_U0_ap_start");
    sc_trace(mVcdFile, rx_fifo_ip_U0_ap_done, "rx_fifo_ip_U0_ap_done");
    sc_trace(mVcdFile, rx_fifo_ip_U0_ap_continue, "rx_fifo_ip_U0_ap_continue");
    sc_trace(mVcdFile, rx_fifo_ip_U0_ap_idle, "rx_fifo_ip_U0_ap_idle");
    sc_trace(mVcdFile, rx_fifo_ip_U0_ap_ready, "rx_fifo_ip_U0_ap_ready");
    sc_trace(mVcdFile, rx_fifo_ip_U0_fifo_in_TREADY, "rx_fifo_ip_U0_fifo_in_TREADY");
    sc_trace(mVcdFile, rx_fifo_ip_U0_rx_fifo_V_data_V_din, "rx_fifo_ip_U0_rx_fifo_V_data_V_din");
    sc_trace(mVcdFile, rx_fifo_ip_U0_rx_fifo_V_data_V_write, "rx_fifo_ip_U0_rx_fifo_V_data_V_write");
    sc_trace(mVcdFile, rx_fifo_ip_U0_rx_fifo_V_keep_V_din, "rx_fifo_ip_U0_rx_fifo_V_keep_V_din");
    sc_trace(mVcdFile, rx_fifo_ip_U0_rx_fifo_V_keep_V_write, "rx_fifo_ip_U0_rx_fifo_V_keep_V_write");
    sc_trace(mVcdFile, rx_fifo_ip_U0_rx_fifo_V_last_V_din, "rx_fifo_ip_U0_rx_fifo_V_last_V_din");
    sc_trace(mVcdFile, rx_fifo_ip_U0_rx_fifo_V_last_V_write, "rx_fifo_ip_U0_rx_fifo_V_last_V_write");
    sc_trace(mVcdFile, ethernet_axis_ip_U0_ap_start, "ethernet_axis_ip_U0_ap_start");
    sc_trace(mVcdFile, ethernet_axis_ip_U0_ap_done, "ethernet_axis_ip_U0_ap_done");
    sc_trace(mVcdFile, ethernet_axis_ip_U0_ap_continue, "ethernet_axis_ip_U0_ap_continue");
    sc_trace(mVcdFile, ethernet_axis_ip_U0_ap_idle, "ethernet_axis_ip_U0_ap_idle");
    sc_trace(mVcdFile, ethernet_axis_ip_U0_ap_ready, "ethernet_axis_ip_U0_ap_ready");
    sc_trace(mVcdFile, ethernet_axis_ip_U0_data_in_TREADY, "ethernet_axis_ip_U0_data_in_TREADY");
    sc_trace(mVcdFile, ethernet_axis_ip_U0_data_out_TDATA, "ethernet_axis_ip_U0_data_out_TDATA");
    sc_trace(mVcdFile, ethernet_axis_ip_U0_data_out_TVALID, "ethernet_axis_ip_U0_data_out_TVALID");
    sc_trace(mVcdFile, ethernet_axis_ip_U0_data_out_TKEEP, "ethernet_axis_ip_U0_data_out_TKEEP");
    sc_trace(mVcdFile, ethernet_axis_ip_U0_data_out_TLAST, "ethernet_axis_ip_U0_data_out_TLAST");
    sc_trace(mVcdFile, ethernet_axis_ip_U0_fifo_out_TDATA, "ethernet_axis_ip_U0_fifo_out_TDATA");
    sc_trace(mVcdFile, ethernet_axis_ip_U0_fifo_out_TVALID, "ethernet_axis_ip_U0_fifo_out_TVALID");
    sc_trace(mVcdFile, ethernet_axis_ip_U0_fifo_out_TKEEP, "ethernet_axis_ip_U0_fifo_out_TKEEP");
    sc_trace(mVcdFile, ethernet_axis_ip_U0_fifo_out_TLAST, "ethernet_axis_ip_U0_fifo_out_TLAST");
    sc_trace(mVcdFile, ethernet_axis_ip_U0_rx_fifo_V_data_V_read, "ethernet_axis_ip_U0_rx_fifo_V_data_V_read");
    sc_trace(mVcdFile, ethernet_axis_ip_U0_rx_fifo_V_keep_V_read, "ethernet_axis_ip_U0_rx_fifo_V_keep_V_read");
    sc_trace(mVcdFile, ethernet_axis_ip_U0_rx_fifo_V_last_V_read, "ethernet_axis_ip_U0_rx_fifo_V_last_V_read");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, rx_fifo_V_data_V_full_n, "rx_fifo_V_data_V_full_n");
    sc_trace(mVcdFile, rx_fifo_V_data_V_dout, "rx_fifo_V_data_V_dout");
    sc_trace(mVcdFile, rx_fifo_V_data_V_empty_n, "rx_fifo_V_data_V_empty_n");
    sc_trace(mVcdFile, rx_fifo_V_keep_V_full_n, "rx_fifo_V_keep_V_full_n");
    sc_trace(mVcdFile, rx_fifo_V_keep_V_dout, "rx_fifo_V_keep_V_dout");
    sc_trace(mVcdFile, rx_fifo_V_keep_V_empty_n, "rx_fifo_V_keep_V_empty_n");
    sc_trace(mVcdFile, rx_fifo_V_last_V_full_n, "rx_fifo_V_last_V_full_n");
    sc_trace(mVcdFile, rx_fifo_V_last_V_dout, "rx_fifo_V_last_V_dout");
    sc_trace(mVcdFile, rx_fifo_V_last_V_empty_n, "rx_fifo_V_last_V_empty_n");
    sc_trace(mVcdFile, rx_fifo_ip_U0_start_full_n, "rx_fifo_ip_U0_start_full_n");
    sc_trace(mVcdFile, rx_fifo_ip_U0_start_write, "rx_fifo_ip_U0_start_write");
    sc_trace(mVcdFile, ethernet_axis_ip_U0_start_full_n, "ethernet_axis_ip_U0_start_full_n");
    sc_trace(mVcdFile, ethernet_axis_ip_U0_start_write, "ethernet_axis_ip_U0_start_write");
#endif

    }
    mHdltvinHandle.open("ethernet_axis.hdltvin.dat");
    mHdltvoutHandle.open("ethernet_axis.hdltvout.dat");
}

ethernet_axis::~ethernet_axis() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete rx_fifo_ip_U0;
    delete ethernet_axis_ip_U0;
    delete rx_fifo_V_data_V_U;
    delete rx_fifo_V_keep_V_U;
    delete rx_fifo_V_last_V_U;
}

void ethernet_axis::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void ethernet_axis::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void ethernet_axis::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_0;
}

void ethernet_axis::thread_data_in_TREADY() {
    data_in_TREADY = ethernet_axis_ip_U0_data_in_TREADY.read();
}

void ethernet_axis::thread_data_out_TDATA() {
    data_out_TDATA = ethernet_axis_ip_U0_data_out_TDATA.read();
}

void ethernet_axis::thread_data_out_TKEEP() {
    data_out_TKEEP = ethernet_axis_ip_U0_data_out_TKEEP.read();
}

void ethernet_axis::thread_data_out_TLAST() {
    data_out_TLAST = ethernet_axis_ip_U0_data_out_TLAST.read();
}

void ethernet_axis::thread_data_out_TVALID() {
    data_out_TVALID = ethernet_axis_ip_U0_data_out_TVALID.read();
}

void ethernet_axis::thread_ethernet_axis_ip_U0_ap_continue() {
    ethernet_axis_ip_U0_ap_continue = ap_const_logic_1;
}

void ethernet_axis::thread_ethernet_axis_ip_U0_ap_start() {
    ethernet_axis_ip_U0_ap_start = ap_const_logic_1;
}

void ethernet_axis::thread_ethernet_axis_ip_U0_start_full_n() {
    ethernet_axis_ip_U0_start_full_n = ap_const_logic_1;
}

void ethernet_axis::thread_ethernet_axis_ip_U0_start_write() {
    ethernet_axis_ip_U0_start_write = ap_const_logic_0;
}

void ethernet_axis::thread_fifo_in_TREADY() {
    fifo_in_TREADY = rx_fifo_ip_U0_fifo_in_TREADY.read();
}

void ethernet_axis::thread_fifo_out_TDATA() {
    fifo_out_TDATA = ethernet_axis_ip_U0_fifo_out_TDATA.read();
}

void ethernet_axis::thread_fifo_out_TKEEP() {
    fifo_out_TKEEP = ethernet_axis_ip_U0_fifo_out_TKEEP.read();
}

void ethernet_axis::thread_fifo_out_TLAST() {
    fifo_out_TLAST = ethernet_axis_ip_U0_fifo_out_TLAST.read();
}

void ethernet_axis::thread_fifo_out_TVALID() {
    fifo_out_TVALID = ethernet_axis_ip_U0_fifo_out_TVALID.read();
}

void ethernet_axis::thread_rx_fifo_ip_U0_ap_continue() {
    rx_fifo_ip_U0_ap_continue = ap_const_logic_1;
}

void ethernet_axis::thread_rx_fifo_ip_U0_ap_start() {
    rx_fifo_ip_U0_ap_start = ap_const_logic_1;
}

void ethernet_axis::thread_rx_fifo_ip_U0_start_full_n() {
    rx_fifo_ip_U0_start_full_n = ap_const_logic_1;
}

void ethernet_axis::thread_rx_fifo_ip_U0_start_write() {
    rx_fifo_ip_U0_start_write = ap_const_logic_0;
}

void ethernet_axis::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"data_in_TDATA\" :  \"" << data_in_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data_in_TKEEP\" :  \"" << data_in_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data_in_TLAST\" :  \"" << data_in_TLAST.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"data_out_TDATA\" :  \"" << data_out_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_out_TKEEP\" :  \"" << data_out_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_out_TLAST\" :  \"" << data_out_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"fifo_in_TDATA\" :  \"" << fifo_in_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"fifo_in_TKEEP\" :  \"" << fifo_in_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"fifo_in_TLAST\" :  \"" << fifo_in_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"fifo_out_TDATA\" :  \"" << fifo_out_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"fifo_out_TKEEP\" :  \"" << fifo_out_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"fifo_out_TLAST\" :  \"" << fifo_out_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"fifo_in_TVALID\" :  \"" << fifo_in_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"fifo_in_TREADY\" :  \"" << fifo_in_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data_in_TVALID\" :  \"" << data_in_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_in_TREADY\" :  \"" << data_in_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_out_TVALID\" :  \"" << data_out_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data_out_TREADY\" :  \"" << data_out_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"fifo_out_TVALID\" :  \"" << fifo_out_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"fifo_out_TREADY\" :  \"" << fifo_out_TREADY.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

