// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _rx_fifo_ip_HH_
#define _rx_fifo_ip_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct rx_fifo_ip : public sc_module {
    // Port declarations 21
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_logic > fifo_in_TVALID;
    sc_in< sc_lv<64> > fifo_in_TDATA;
    sc_out< sc_logic > fifo_in_TREADY;
    sc_in< sc_lv<8> > fifo_in_TKEEP;
    sc_in< sc_lv<1> > fifo_in_TLAST;
    sc_out< sc_lv<64> > rx_fifo_V_data_V_din;
    sc_in< sc_logic > rx_fifo_V_data_V_full_n;
    sc_out< sc_logic > rx_fifo_V_data_V_write;
    sc_out< sc_lv<8> > rx_fifo_V_keep_V_din;
    sc_in< sc_logic > rx_fifo_V_keep_V_full_n;
    sc_out< sc_logic > rx_fifo_V_keep_V_write;
    sc_out< sc_lv<1> > rx_fifo_V_last_V_din;
    sc_in< sc_logic > rx_fifo_V_last_V_full_n;
    sc_out< sc_logic > rx_fifo_V_last_V_write;


    // Module declarations
    rx_fifo_ip(sc_module_name name);
    SC_HAS_PROCESS(rx_fifo_ip);

    ~rx_fifo_ip();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_lv<1> > tmp_nbreadreq_fu_38_p5;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< sc_logic > rx_fifo_V_data_V1_status;
    sc_signal< sc_lv<1> > tmp_reg_85;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_logic > fifo_in_TDATA_blk_n;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > rx_fifo_V_data_V_blk_n;
    sc_signal< sc_logic > rx_fifo_V_keep_V_blk_n;
    sc_signal< sc_logic > rx_fifo_V_last_V_blk_n;
    sc_signal< sc_lv<64> > tmp_data_V_reg_89;
    sc_signal< sc_lv<8> > tmp_keep_V_reg_94;
    sc_signal< sc_lv<1> > tmp_last_V_reg_99;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > rx_fifo_V_data_V1_update;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to0;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to0();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_fifo_in_TDATA_blk_n();
    void thread_fifo_in_TREADY();
    void thread_rx_fifo_V_data_V1_status();
    void thread_rx_fifo_V_data_V1_update();
    void thread_rx_fifo_V_data_V_blk_n();
    void thread_rx_fifo_V_data_V_din();
    void thread_rx_fifo_V_data_V_write();
    void thread_rx_fifo_V_keep_V_blk_n();
    void thread_rx_fifo_V_keep_V_din();
    void thread_rx_fifo_V_keep_V_write();
    void thread_rx_fifo_V_last_V_blk_n();
    void thread_rx_fifo_V_last_V_din();
    void thread_rx_fifo_V_last_V_write();
    void thread_tmp_nbreadreq_fu_38_p5();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
