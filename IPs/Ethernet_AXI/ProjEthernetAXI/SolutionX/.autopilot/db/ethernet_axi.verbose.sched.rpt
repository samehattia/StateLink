

================================================================
== Vivado HLS Report for 'ethernet_axi'
================================================================
* Date:           Thu Jul 14 17:16:19 2022

* Version:        2018.3 (Build 2405991 on Thu Dec 06 23:56:15 MST 2018)
* Project:        ProjEthernetAXI
* Solution:       SolutionX
* Product family: kintexu
* Target device:  xcku040-ffva1156-2-e


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |   2.00|     2.321|        0.30|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+----------+
    |  Latency  |  Interval | Pipeline |
    | min | max | min | max |   Type   |
    +-----+-----+-----+-----+----------+
    |   14|   14|    1|    1| function |
    +-----+-----+-----+-----+----------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 1
HasVarLatency: 0
IsPipeline: 1
IsRtlPipelined: 1
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 15


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 15
* Pipeline : 1
  Pipeline-0 : II = 1, D = 15, States = { 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 2.13>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%fsm_state_V_load = load i1* @fsm_state_V, align 1" [ethernet_axi.cpp:58]   --->   Operation 16 'load' 'fsm_state_V_load' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%axi_command_V_load = load i8* @axi_command_V, align 1" [ethernet_axi.cpp:104]   --->   Operation 17 'load' 'axi_command_V_load' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%t_V_3 = load i9* @read_len_V, align 2" [ethernet_axi.cpp:156]   --->   Operation 18 'load' 't_V_3' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "br i1 %fsm_state_V_load, label %9, label %0" [ethernet_axi.cpp:58]   --->   Operation 19 'br' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%tmp = call i1 @_ssdm_op_NbReadReq.axis.i64P.i8P.i1P(i64* %data_in_V_data_V, i8* %data_in_V_keep_V, i1* %data_in_V_last_V, i32 1)" [ethernet_axi.cpp:61]   --->   Operation 20 'nbreadreq' 'tmp' <Predicate = (!fsm_state_V_load)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "br i1 %tmp, label %1, label %._crit_edge849" [ethernet_axi.cpp:61]   --->   Operation 21 'br' <Predicate = (!fsm_state_V_load)> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%empty = call { i64, i8, i1 } @_ssdm_op_Read.axis.volatile.i64P.i8P.i1P(i64* %data_in_V_data_V, i8* %data_in_V_keep_V, i1* %data_in_V_last_V)" [ethernet_axi.cpp:62]   --->   Operation 22 'read' 'empty' <Predicate = (!fsm_state_V_load & tmp)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "%tmp_data_V_1 = extractvalue { i64, i8, i1 } %empty, 0" [ethernet_axi.cpp:62]   --->   Operation 23 'extractvalue' 'tmp_data_V_1' <Predicate = (!fsm_state_V_load & tmp)> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%tmp_last_V = extractvalue { i64, i8, i1 } %empty, 2" [ethernet_axi.cpp:62]   --->   Operation 24 'extractvalue' 'tmp_last_V' <Predicate = (!fsm_state_V_load & tmp)> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.00ns)   --->   "%t_V_1 = load i2* @word_count_V, align 1" [ethernet_axi.cpp:64]   --->   Operation 25 'load' 't_V_1' <Predicate = (!fsm_state_V_load & tmp)> <Delay = 0.00>
ST_1 : Operation 26 [1/1] (0.90ns)   --->   "switch i2 %t_V_1, label %5 [
    i2 0, label %2
    i2 1, label %3
    i2 -2, label %4
  ]" [ethernet_axi.cpp:64]   --->   Operation 26 'switch' <Predicate = (!fsm_state_V_load & tmp)> <Delay = 0.90>
ST_1 : Operation 27 [1/1] (0.00ns)   --->   "%p_Result_10 = call i9 @_ssdm_op_PartSelect.i9.i64.i32.i32(i64 %tmp_data_V_1, i32 32, i32 40)" [ethernet_axi.cpp:86]   --->   Operation 27 'partselect' 'p_Result_10' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 2)> <Delay = 0.00>
ST_1 : Operation 28 [1/1] (0.83ns)   --->   "store i9 %p_Result_10, i9* @read_len_V, align 2" [ethernet_axi.cpp:96]   --->   Operation 28 'store' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 2)> <Delay = 0.83>
ST_1 : Operation 29 [1/1] (0.91ns)   --->   "br label %7" [ethernet_axi.cpp:99]   --->   Operation 29 'br' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 2)> <Delay = 0.91>
ST_1 : Operation 30 [1/1] (0.00ns)   --->   "%p_Result_9 = call i8 @_ssdm_op_PartSelect.i8.i64.i32.i32(i64 %tmp_data_V_1, i32 56, i32 63)" [ethernet_axi.cpp:78]   --->   Operation 30 'partselect' 'p_Result_9' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 1)> <Delay = 0.00>
ST_1 : Operation 31 [1/1] (0.00ns)   --->   "store i8 %p_Result_9, i8* @axi_command_V, align 1" [ethernet_axi.cpp:78]   --->   Operation 31 'store' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 1)> <Delay = 0.00>
ST_1 : Operation 32 [1/1] (0.91ns)   --->   "br label %7" [ethernet_axi.cpp:81]   --->   Operation 32 'br' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 1)> <Delay = 0.91>
ST_1 : Operation 33 [1/1] (0.91ns)   --->   "br label %7" [ethernet_axi.cpp:71]   --->   Operation 33 'br' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 0)> <Delay = 0.91>
ST_1 : Operation 34 [1/1] (0.91ns)   --->   "br label %7" [ethernet_axi.cpp:110]   --->   Operation 34 'br' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 3)> <Delay = 0.91>
ST_1 : Operation 35 [1/1] (0.00ns)   --->   "%word_count_V_flag = phi i1 [ false, %._crit_edge850 ], [ true, %4 ], [ true, %3 ], [ true, %2 ]"   --->   Operation 35 'phi' 'word_count_V_flag' <Predicate = (!fsm_state_V_load & tmp)> <Delay = 0.00>
ST_1 : Operation 36 [1/1] (0.00ns)   --->   "%word_count_V_new = phi i2 [ undef, %._crit_edge850 ], [ -1, %4 ], [ -2, %3 ], [ 1, %2 ]"   --->   Operation 36 'phi' 'word_count_V_new' <Predicate = (!fsm_state_V_load & tmp)> <Delay = 0.00>
ST_1 : Operation 37 [1/1] (0.83ns)   --->   "br i1 %tmp_last_V, label %8, label %._crit_edge852" [ethernet_axi.cpp:113]   --->   Operation 37 'br' <Predicate = (!fsm_state_V_load & tmp)> <Delay = 0.83>
ST_1 : Operation 38 [1/1] (0.83ns)   --->   "store i1 true, i1* @fsm_state_V, align 1" [ethernet_axi.cpp:115]   --->   Operation 38 'store' <Predicate = (!fsm_state_V_load & tmp & tmp_last_V)> <Delay = 0.83>
ST_1 : Operation 39 [1/1] (0.83ns)   --->   "br label %._crit_edge852" [ethernet_axi.cpp:116]   --->   Operation 39 'br' <Predicate = (!fsm_state_V_load & tmp & tmp_last_V)> <Delay = 0.83>
ST_1 : Operation 40 [1/1] (0.00ns)   --->   "%word_count_V_flag_1 = phi i1 [ true, %8 ], [ %word_count_V_flag, %7 ]"   --->   Operation 40 'phi' 'word_count_V_flag_1' <Predicate = (!fsm_state_V_load & tmp)> <Delay = 0.00>
ST_1 : Operation 41 [1/1] (0.00ns)   --->   "%word_count_V_new_1 = phi i2 [ 0, %8 ], [ %word_count_V_new, %7 ]"   --->   Operation 41 'phi' 'word_count_V_new_1' <Predicate = (!fsm_state_V_load & tmp)> <Delay = 0.00>
ST_1 : Operation 42 [1/1] (0.00ns)   --->   "br i1 %word_count_V_flag_1, label %mergeST, label %._crit_edge852.new"   --->   Operation 42 'br' <Predicate = (!fsm_state_V_load & tmp)> <Delay = 0.00>
ST_1 : Operation 43 [1/1] (0.00ns)   --->   "store i2 %word_count_V_new_1, i2* @word_count_V, align 1" [ethernet_axi.cpp:70]   --->   Operation 43 'store' <Predicate = (!fsm_state_V_load & tmp & word_count_V_flag_1)> <Delay = 0.00>
ST_1 : Operation 44 [1/1] (0.00ns)   --->   "%t_V = load i2* @send_word_count_V, align 1" [ethernet_axi.cpp:122]   --->   Operation 44 'load' 't_V' <Predicate = (fsm_state_V_load)> <Delay = 0.00>
ST_1 : Operation 45 [1/1] (0.90ns)   --->   "switch i2 %t_V, label %13 [
    i2 0, label %10
    i2 1, label %11
    i2 -2, label %12
  ]" [ethernet_axi.cpp:122]   --->   Operation 45 'switch' <Predicate = (fsm_state_V_load)> <Delay = 0.90>
ST_1 : Operation 46 [1/1] (1.00ns)   --->   "store i2 -1, i2* @send_word_count_V, align 1" [ethernet_axi.cpp:150]   --->   Operation 46 'store' <Predicate = (fsm_state_V_load & t_V == 2)> <Delay = 1.00>
ST_1 : Operation 47 [1/1] (1.00ns)   --->   "store i2 -2, i2* @send_word_count_V, align 1" [ethernet_axi.cpp:140]   --->   Operation 47 'store' <Predicate = (fsm_state_V_load & t_V == 1)> <Delay = 1.00>
ST_1 : Operation 48 [1/1] (1.00ns)   --->   "store i2 1, i2* @send_word_count_V, align 1" [ethernet_axi.cpp:129]   --->   Operation 48 'store' <Predicate = (fsm_state_V_load & t_V == 0)> <Delay = 1.00>
ST_1 : Operation 49 [1/1] (0.78ns)   --->   "%tmp_5 = icmp eq i8 %axi_command_V_load, 82" [ethernet_axi.cpp:156]   --->   Operation 49 'icmp' 'tmp_5' <Predicate = (fsm_state_V_load & t_V == 3)> <Delay = 0.78> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 0.82> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 50 [1/1] (0.00ns)   --->   "br i1 %tmp_5, label %14, label %.critedge" [ethernet_axi.cpp:156]   --->   Operation 50 'br' <Predicate = (fsm_state_V_load & t_V == 3)> <Delay = 0.00>
ST_1 : Operation 51 [1/1] (0.82ns)   --->   "%tmp_s = icmp eq i9 %t_V_3, 0" [ethernet_axi.cpp:156]   --->   Operation 51 'icmp' 'tmp_s' <Predicate = (fsm_state_V_load & t_V == 3 & tmp_5)> <Delay = 0.82> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 0.82> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 52 [1/1] (0.00ns)   --->   "br i1 %tmp_s, label %._crit_edge853, label %15" [ethernet_axi.cpp:156]   --->   Operation 52 'br' <Predicate = (fsm_state_V_load & t_V == 3 & tmp_5)> <Delay = 0.00>
ST_1 : Operation 53 [1/1] (1.30ns)   --->   "%tmp_3 = add i9 %t_V_3, -1" [ethernet_axi.cpp:161]   --->   Operation 53 'add' 'tmp_3' <Predicate = (fsm_state_V_load & t_V == 3 & tmp_5 & !tmp_s)> <Delay = 1.30> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.30> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 54 [1/1] (0.83ns)   --->   "store i9 %tmp_3, i9* @read_len_V, align 2" [ethernet_axi.cpp:161]   --->   Operation 54 'store' <Predicate = (fsm_state_V_load & t_V == 3 & tmp_5 & !tmp_s)> <Delay = 0.83>
ST_1 : Operation 55 [1/1] (1.00ns)   --->   "store i2 0, i2* @send_word_count_V, align 1" [ethernet_axi.cpp:177]   --->   Operation 55 'store' <Predicate = (fsm_state_V_load & t_V == 3 & tmp_s) | (fsm_state_V_load & t_V == 3 & !tmp_5)> <Delay = 1.00>
ST_1 : Operation 56 [1/1] (0.83ns)   --->   "store i1 false, i1* @fsm_state_V, align 1" [ethernet_axi.cpp:178]   --->   Operation 56 'store' <Predicate = (fsm_state_V_load & t_V == 3 & tmp_s) | (fsm_state_V_load & t_V == 3 & !tmp_5)> <Delay = 0.83>

State 2 <SV = 1> <Delay = 2.32>
ST_2 : Operation 57 [1/1] (0.00ns)   --->   "%p_Result_11 = call i29 @_ssdm_op_PartSelect.i29.i64.i32.i32(i64 %tmp_data_V_1, i32 3, i32 31)" [ethernet_axi.cpp:90]   --->   Operation 57 'partselect' 'p_Result_11' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 2)> <Delay = 0.00>
ST_2 : Operation 58 [1/1] (0.00ns)   --->   "%p_4 = zext i29 %p_Result_11 to i32" [ethernet_axi.cpp:90]   --->   Operation 58 'zext' 'p_4' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 2)> <Delay = 0.00>
ST_2 : Operation 59 [1/1] (0.83ns)   --->   "store i32 %p_4, i32* @read_address_V, align 4" [ethernet_axi.cpp:95]   --->   Operation 59 'store' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 2)> <Delay = 0.83>
ST_2 : Operation 60 [1/1] (0.00ns)   --->   "%mem_V_addr = getelementptr i64* %mem_V, i64 268435456" [ethernet_axi.cpp:168]   --->   Operation 60 'getelementptr' 'mem_V_addr' <Predicate = (fsm_state_V_load & t_V == 3 & !tmp_5)> <Delay = 0.00>
ST_2 : Operation 61 [7/7] (1.70ns)   --->   "%tmp_V_2_req = call i1 @_ssdm_op_ReadReq.m_axi.i64P(i64* %mem_V_addr, i32 1)" [ethernet_axi.cpp:168]   --->   Operation 61 'readreq' 'tmp_V_2_req' <Predicate = (fsm_state_V_load & t_V == 3 & !tmp_5)> <Delay = 1.70> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_2 : Operation 62 [1/1] (0.00ns)   --->   "%t_V_2 = load i32* @read_address_V, align 4" [ethernet_axi.cpp:157]   --->   Operation 62 'load' 't_V_2' <Predicate = (fsm_state_V_load & t_V == 3 & tmp_5 & !tmp_s)> <Delay = 0.00>
ST_2 : Operation 63 [1/1] (0.00ns)   --->   "%tmp_1 = zext i32 %t_V_2 to i64" [ethernet_axi.cpp:157]   --->   Operation 63 'zext' 'tmp_1' <Predicate = (fsm_state_V_load & t_V == 3 & tmp_5 & !tmp_s)> <Delay = 0.00>
ST_2 : Operation 64 [1/1] (0.00ns)   --->   "%mem_V_addr_2 = getelementptr i64* %mem_V, i64 %tmp_1" [ethernet_axi.cpp:157]   --->   Operation 64 'getelementptr' 'mem_V_addr_2' <Predicate = (fsm_state_V_load & t_V == 3 & tmp_5 & !tmp_s)> <Delay = 0.00>
ST_2 : Operation 65 [7/7] (1.70ns)   --->   "%mem_V_load_req = call i1 @_ssdm_op_ReadReq.m_axi.i64P(i64* %mem_V_addr_2, i32 1)" [ethernet_axi.cpp:157]   --->   Operation 65 'readreq' 'mem_V_load_req' <Predicate = (fsm_state_V_load & t_V == 3 & tmp_5 & !tmp_s)> <Delay = 1.70> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_2 : Operation 66 [1/1] (1.48ns)   --->   "%tmp_2 = add i32 %t_V_2, 1" [ethernet_axi.cpp:160]   --->   Operation 66 'add' 'tmp_2' <Predicate = (fsm_state_V_load & t_V == 3 & tmp_5 & !tmp_s)> <Delay = 1.48> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.30> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 67 [1/1] (0.83ns)   --->   "store i32 %tmp_2, i32* @read_address_V, align 4" [ethernet_axi.cpp:160]   --->   Operation 67 'store' <Predicate = (fsm_state_V_load & t_V == 3 & tmp_5 & !tmp_s)> <Delay = 0.83>
ST_2 : Operation 68 [1/1] (0.00ns)   --->   "%mem_V_addr_1 = getelementptr i64* %mem_V, i64 268435458" [ethernet_axi.cpp:166]   --->   Operation 68 'getelementptr' 'mem_V_addr_1' <Predicate = (fsm_state_V_load & t_V == 3 & tmp_5 & tmp_s)> <Delay = 0.00>
ST_2 : Operation 69 [7/7] (1.70ns)   --->   "%tmp_V_req = call i1 @_ssdm_op_ReadReq.m_axi.i64P(i64* %mem_V_addr_1, i32 1)" [ethernet_axi.cpp:166]   --->   Operation 69 'readreq' 'tmp_V_req' <Predicate = (fsm_state_V_load & t_V == 3 & tmp_5 & tmp_s)> <Delay = 1.70> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 3 <SV = 2> <Delay = 1.70>
ST_3 : Operation 70 [6/7] (1.70ns)   --->   "%tmp_V_2_req = call i1 @_ssdm_op_ReadReq.m_axi.i64P(i64* %mem_V_addr, i32 1)" [ethernet_axi.cpp:168]   --->   Operation 70 'readreq' 'tmp_V_2_req' <Predicate = (fsm_state_V_load & t_V == 3 & !tmp_5)> <Delay = 1.70> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_3 : Operation 71 [6/7] (1.70ns)   --->   "%mem_V_load_req = call i1 @_ssdm_op_ReadReq.m_axi.i64P(i64* %mem_V_addr_2, i32 1)" [ethernet_axi.cpp:157]   --->   Operation 71 'readreq' 'mem_V_load_req' <Predicate = (fsm_state_V_load & t_V == 3 & tmp_5 & !tmp_s)> <Delay = 1.70> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_3 : Operation 72 [6/7] (1.70ns)   --->   "%tmp_V_req = call i1 @_ssdm_op_ReadReq.m_axi.i64P(i64* %mem_V_addr_1, i32 1)" [ethernet_axi.cpp:166]   --->   Operation 72 'readreq' 'tmp_V_req' <Predicate = (fsm_state_V_load & t_V == 3 & tmp_5 & tmp_s)> <Delay = 1.70> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 4 <SV = 3> <Delay = 1.70>
ST_4 : Operation 73 [5/7] (1.70ns)   --->   "%tmp_V_2_req = call i1 @_ssdm_op_ReadReq.m_axi.i64P(i64* %mem_V_addr, i32 1)" [ethernet_axi.cpp:168]   --->   Operation 73 'readreq' 'tmp_V_2_req' <Predicate = (fsm_state_V_load & t_V == 3 & !tmp_5)> <Delay = 1.70> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_4 : Operation 74 [5/7] (1.70ns)   --->   "%mem_V_load_req = call i1 @_ssdm_op_ReadReq.m_axi.i64P(i64* %mem_V_addr_2, i32 1)" [ethernet_axi.cpp:157]   --->   Operation 74 'readreq' 'mem_V_load_req' <Predicate = (fsm_state_V_load & t_V == 3 & tmp_5 & !tmp_s)> <Delay = 1.70> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_4 : Operation 75 [5/7] (1.70ns)   --->   "%tmp_V_req = call i1 @_ssdm_op_ReadReq.m_axi.i64P(i64* %mem_V_addr_1, i32 1)" [ethernet_axi.cpp:166]   --->   Operation 75 'readreq' 'tmp_V_req' <Predicate = (fsm_state_V_load & t_V == 3 & tmp_5 & tmp_s)> <Delay = 1.70> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 5 <SV = 4> <Delay = 1.70>
ST_5 : Operation 76 [4/7] (1.70ns)   --->   "%tmp_V_2_req = call i1 @_ssdm_op_ReadReq.m_axi.i64P(i64* %mem_V_addr, i32 1)" [ethernet_axi.cpp:168]   --->   Operation 76 'readreq' 'tmp_V_2_req' <Predicate = (fsm_state_V_load & t_V == 3 & !tmp_5)> <Delay = 1.70> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_5 : Operation 77 [4/7] (1.70ns)   --->   "%mem_V_load_req = call i1 @_ssdm_op_ReadReq.m_axi.i64P(i64* %mem_V_addr_2, i32 1)" [ethernet_axi.cpp:157]   --->   Operation 77 'readreq' 'mem_V_load_req' <Predicate = (fsm_state_V_load & t_V == 3 & tmp_5 & !tmp_s)> <Delay = 1.70> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_5 : Operation 78 [4/7] (1.70ns)   --->   "%tmp_V_req = call i1 @_ssdm_op_ReadReq.m_axi.i64P(i64* %mem_V_addr_1, i32 1)" [ethernet_axi.cpp:166]   --->   Operation 78 'readreq' 'tmp_V_req' <Predicate = (fsm_state_V_load & t_V == 3 & tmp_5 & tmp_s)> <Delay = 1.70> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 6 <SV = 5> <Delay = 1.70>
ST_6 : Operation 79 [3/7] (1.70ns)   --->   "%tmp_V_2_req = call i1 @_ssdm_op_ReadReq.m_axi.i64P(i64* %mem_V_addr, i32 1)" [ethernet_axi.cpp:168]   --->   Operation 79 'readreq' 'tmp_V_2_req' <Predicate = (fsm_state_V_load & t_V == 3 & !tmp_5)> <Delay = 1.70> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_6 : Operation 80 [3/7] (1.70ns)   --->   "%mem_V_load_req = call i1 @_ssdm_op_ReadReq.m_axi.i64P(i64* %mem_V_addr_2, i32 1)" [ethernet_axi.cpp:157]   --->   Operation 80 'readreq' 'mem_V_load_req' <Predicate = (fsm_state_V_load & t_V == 3 & tmp_5 & !tmp_s)> <Delay = 1.70> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_6 : Operation 81 [3/7] (1.70ns)   --->   "%tmp_V_req = call i1 @_ssdm_op_ReadReq.m_axi.i64P(i64* %mem_V_addr_1, i32 1)" [ethernet_axi.cpp:166]   --->   Operation 81 'readreq' 'tmp_V_req' <Predicate = (fsm_state_V_load & t_V == 3 & tmp_5 & tmp_s)> <Delay = 1.70> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 7 <SV = 6> <Delay = 1.70>
ST_7 : Operation 82 [2/7] (1.70ns)   --->   "%tmp_V_2_req = call i1 @_ssdm_op_ReadReq.m_axi.i64P(i64* %mem_V_addr, i32 1)" [ethernet_axi.cpp:168]   --->   Operation 82 'readreq' 'tmp_V_2_req' <Predicate = (fsm_state_V_load & t_V == 3 & !tmp_5)> <Delay = 1.70> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_7 : Operation 83 [2/7] (1.70ns)   --->   "%mem_V_load_req = call i1 @_ssdm_op_ReadReq.m_axi.i64P(i64* %mem_V_addr_2, i32 1)" [ethernet_axi.cpp:157]   --->   Operation 83 'readreq' 'mem_V_load_req' <Predicate = (fsm_state_V_load & t_V == 3 & tmp_5 & !tmp_s)> <Delay = 1.70> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_7 : Operation 84 [2/7] (1.70ns)   --->   "%tmp_V_req = call i1 @_ssdm_op_ReadReq.m_axi.i64P(i64* %mem_V_addr_1, i32 1)" [ethernet_axi.cpp:166]   --->   Operation 84 'readreq' 'tmp_V_req' <Predicate = (fsm_state_V_load & t_V == 3 & tmp_5 & tmp_s)> <Delay = 1.70> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 8 <SV = 7> <Delay = 2.32>
ST_8 : Operation 85 [1/1] (0.00ns)   --->   "%t_V_5 = load i9* @write_len_V, align 2" [ethernet_axi.cpp:104]   --->   Operation 85 'load' 't_V_5' <Predicate = (!fsm_state_V_load & tmp)> <Delay = 0.00>
ST_8 : Operation 86 [1/1] (0.83ns)   --->   "store i32 %p_4, i32* @write_address_V, align 4" [ethernet_axi.cpp:90]   --->   Operation 86 'store' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 2)> <Delay = 0.83>
ST_8 : Operation 87 [1/1] (0.83ns)   --->   "store i9 %p_Result_10, i9* @write_len_V, align 2" [ethernet_axi.cpp:91]   --->   Operation 87 'store' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 2)> <Delay = 0.83>
ST_8 : Operation 88 [1/1] (0.78ns)   --->   "%tmp_9 = icmp ne i8 %axi_command_V_load, 87" [ethernet_axi.cpp:104]   --->   Operation 88 'icmp' 'tmp_9' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 3)> <Delay = 0.78> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 0.82> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 89 [1/1] (0.82ns)   --->   "%tmp_4 = icmp eq i9 %t_V_5, 0" [ethernet_axi.cpp:104]   --->   Operation 89 'icmp' 'tmp_4' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 3)> <Delay = 0.82> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 0.82> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 90 [1/1] (0.33ns)   --->   "%or_cond = or i1 %tmp_9, %tmp_4" [ethernet_axi.cpp:104]   --->   Operation 90 'or' 'or_cond' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 3)> <Delay = 0.33> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 91 [1/1] (0.00ns)   --->   "br i1 %or_cond, label %._crit_edge850, label %6" [ethernet_axi.cpp:104]   --->   Operation 91 'br' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 3)> <Delay = 0.00>
ST_8 : Operation 92 [1/1] (0.00ns)   --->   "%t_V_4 = load i32* @write_address_V, align 4" [ethernet_axi.cpp:105]   --->   Operation 92 'load' 't_V_4' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 3 & !or_cond)> <Delay = 0.00>
ST_8 : Operation 93 [1/1] (1.48ns)   --->   "%tmp_6 = add i32 %t_V_4, 1" [ethernet_axi.cpp:107]   --->   Operation 93 'add' 'tmp_6' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 3 & !or_cond)> <Delay = 1.48> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.30> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 94 [1/1] (0.83ns)   --->   "store i32 %tmp_6, i32* @write_address_V, align 4" [ethernet_axi.cpp:107]   --->   Operation 94 'store' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 3 & !or_cond)> <Delay = 0.83>
ST_8 : Operation 95 [1/1] (1.30ns)   --->   "%tmp_7 = add i9 %t_V_5, -1" [ethernet_axi.cpp:108]   --->   Operation 95 'add' 'tmp_7' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 3 & !or_cond)> <Delay = 1.30> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.30> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 96 [1/1] (0.83ns)   --->   "store i9 %tmp_7, i9* @write_len_V, align 2" [ethernet_axi.cpp:108]   --->   Operation 96 'store' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 3 & !or_cond)> <Delay = 0.83>
ST_8 : Operation 97 [1/7] (1.70ns)   --->   "%tmp_V_2_req = call i1 @_ssdm_op_ReadReq.m_axi.i64P(i64* %mem_V_addr, i32 1)" [ethernet_axi.cpp:168]   --->   Operation 97 'readreq' 'tmp_V_2_req' <Predicate = (fsm_state_V_load & t_V == 3 & !tmp_5)> <Delay = 1.70> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_8 : Operation 98 [1/7] (1.70ns)   --->   "%mem_V_load_req = call i1 @_ssdm_op_ReadReq.m_axi.i64P(i64* %mem_V_addr_2, i32 1)" [ethernet_axi.cpp:157]   --->   Operation 98 'readreq' 'mem_V_load_req' <Predicate = (fsm_state_V_load & t_V == 3 & tmp_5 & !tmp_s)> <Delay = 1.70> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_8 : Operation 99 [1/7] (1.70ns)   --->   "%tmp_V_req = call i1 @_ssdm_op_ReadReq.m_axi.i64P(i64* %mem_V_addr_1, i32 1)" [ethernet_axi.cpp:166]   --->   Operation 99 'readreq' 'tmp_V_req' <Predicate = (fsm_state_V_load & t_V == 3 & tmp_5 & tmp_s)> <Delay = 1.70> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 9 <SV = 8> <Delay = 1.70>
ST_9 : Operation 100 [1/1] (0.00ns)   --->   "%tmp_8 = zext i32 %t_V_4 to i64" [ethernet_axi.cpp:105]   --->   Operation 100 'zext' 'tmp_8' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 3 & !or_cond)> <Delay = 0.00>
ST_9 : Operation 101 [1/1] (0.00ns)   --->   "%mem_V_addr_3 = getelementptr i64* %mem_V, i64 %tmp_8" [ethernet_axi.cpp:105]   --->   Operation 101 'getelementptr' 'mem_V_addr_3' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 3 & !or_cond)> <Delay = 0.00>
ST_9 : Operation 102 [1/1] (1.70ns)   --->   "%mem_V_addr_3_req = call i1 @_ssdm_op_WriteReq.m_axi.i64P(i64* %mem_V_addr_3, i32 1)" [ethernet_axi.cpp:105]   --->   Operation 102 'writereq' 'mem_V_addr_3_req' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 3 & !or_cond)> <Delay = 1.70> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_9 : Operation 103 [1/1] (1.70ns)   --->   "%tmp_V_2 = call i64 @_ssdm_op_Read.m_axi.i64P(i64* %mem_V_addr)" [ethernet_axi.cpp:168]   --->   Operation 103 'read' 'tmp_V_2' <Predicate = (fsm_state_V_load & t_V == 3 & !tmp_5)> <Delay = 1.70> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_9 : Operation 104 [1/1] (0.00ns)   --->   "%tmp_11 = trunc i64 %tmp_V_2 to i32" [ethernet_axi.cpp:168]   --->   Operation 104 'trunc' 'tmp_11' <Predicate = (fsm_state_V_load & t_V == 3 & !tmp_5)> <Delay = 0.00>
ST_9 : Operation 105 [1/1] (1.70ns)   --->   "%mem_V_addr_2_read = call i64 @_ssdm_op_Read.m_axi.i64P(i64* %mem_V_addr_2)" [ethernet_axi.cpp:157]   --->   Operation 105 'read' 'mem_V_addr_2_read' <Predicate = (fsm_state_V_load & t_V == 3 & tmp_5 & !tmp_s)> <Delay = 1.70> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_9 : Operation 106 [1/1] (1.70ns)   --->   "%tmp_V = call i64 @_ssdm_op_Read.m_axi.i64P(i64* %mem_V_addr_1)" [ethernet_axi.cpp:166]   --->   Operation 106 'read' 'tmp_V' <Predicate = (fsm_state_V_load & t_V == 3 & tmp_5 & tmp_s)> <Delay = 1.70> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_9 : Operation 107 [1/1] (0.00ns)   --->   "%tmp_15 = trunc i64 %tmp_V to i32" [ethernet_axi.cpp:166]   --->   Operation 107 'trunc' 'tmp_15' <Predicate = (fsm_state_V_load & t_V == 3 & tmp_5 & tmp_s)> <Delay = 0.00>

State 10 <SV = 9> <Delay = 1.70>
ST_10 : Operation 108 [1/1] (0.00ns)   --->   "%tmp_14 = trunc i64 %tmp_data_V_1 to i32" [ethernet_axi.cpp:85]   --->   Operation 108 'trunc' 'tmp_14' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 2)> <Delay = 0.00>
ST_10 : Operation 109 [1/1] (0.00ns)   --->   "store i32 %tmp_14, i32* @axi_address_V, align 4" [ethernet_axi.cpp:85]   --->   Operation 109 'store' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 2)> <Delay = 0.00>
ST_10 : Operation 110 [1/1] (0.00ns)   --->   "store i9 %p_Result_10, i9* @axi_len_V, align 2" [ethernet_axi.cpp:86]   --->   Operation 110 'store' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 2)> <Delay = 0.00>
ST_10 : Operation 111 [1/1] (0.00ns)   --->   "%p_Result_s = call i16 @_ssdm_op_PartSelect.i16.i64.i32.i32(i64 %tmp_data_V_1, i32 32, i32 47)" [ethernet_axi.cpp:76]   --->   Operation 111 'partselect' 'p_Result_s' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 1)> <Delay = 0.00>
ST_10 : Operation 112 [1/1] (0.00ns)   --->   "store i16 %p_Result_s, i16* @mac_type_V, align 2" [ethernet_axi.cpp:76]   --->   Operation 112 'store' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 1)> <Delay = 0.00>
ST_10 : Operation 113 [1/1] (0.00ns)   --->   "%p_Result_8 = call i8 @_ssdm_op_PartSelect.i8.i64.i32.i32(i64 %tmp_data_V_1, i32 48, i32 55)" [ethernet_axi.cpp:77]   --->   Operation 113 'partselect' 'p_Result_8' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 1)> <Delay = 0.00>
ST_10 : Operation 114 [1/1] (0.00ns)   --->   "store i8 %p_Result_8, i8* @ethernet_axi_id_V, align 1" [ethernet_axi.cpp:77]   --->   Operation 114 'store' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 1)> <Delay = 0.00>
ST_10 : Operation 115 [1/1] (1.70ns)   --->   "call void @_ssdm_op_Write.m_axi.i64P(i64* %mem_V_addr_3, i64 %tmp_data_V_1, i8 -1)" [ethernet_axi.cpp:105]   --->   Operation 115 'write' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 3 & !or_cond)> <Delay = 1.70> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_10 : Operation 116 [1/1] (0.00ns)   --->   "%p_Result_4 = call i64 @llvm.part.set.i64.i32(i64 undef, i32 %tmp_11, i32 0, i32 31)" [ethernet_axi.cpp:168]   --->   Operation 116 'partset' 'p_Result_4' <Predicate = (fsm_state_V_load & t_V == 3 & !tmp_5)> <Delay = 0.00>
ST_10 : Operation 117 [1/1] (0.83ns)   --->   "br label %16"   --->   Operation 117 'br' <Predicate = (fsm_state_V_load & t_V == 3 & !tmp_5)> <Delay = 0.83>
ST_10 : Operation 118 [1/1] (0.00ns)   --->   "%p_Result_12 = call i64 @llvm.part.set.i64.i32(i64 undef, i32 %tmp_15, i32 0, i32 31)" [ethernet_axi.cpp:166]   --->   Operation 118 'partset' 'p_Result_12' <Predicate = (fsm_state_V_load & t_V == 3 & tmp_5 & tmp_s)> <Delay = 0.00>
ST_10 : Operation 119 [1/1] (0.83ns)   --->   "br label %16" [ethernet_axi.cpp:166]   --->   Operation 119 'br' <Predicate = (fsm_state_V_load & t_V == 3 & tmp_5 & tmp_s)> <Delay = 0.83>

State 11 <SV = 10> <Delay = 1.70>
ST_11 : Operation 120 [1/1] (0.00ns)   --->   "%p_Val2_s = load i48* @dest_address_V, align 8" [ethernet_axi.cpp:126]   --->   Operation 120 'load' 'p_Val2_s' <Predicate = true> <Delay = 0.00>
ST_11 : Operation 121 [1/1] (0.00ns)   --->   "%p_Val2_2 = load i48* @src_address_V, align 8" [ethernet_axi.cpp:68]   --->   Operation 121 'load' 'p_Val2_2' <Predicate = true> <Delay = 0.00>
ST_11 : Operation 122 [1/1] (0.00ns)   --->   "%tmp_13 = trunc i64 %tmp_data_V_1 to i32" [ethernet_axi.cpp:75]   --->   Operation 122 'trunc' 'tmp_13' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 1)> <Delay = 0.00>
ST_11 : Operation 123 [1/1] (0.00ns)   --->   "%p_Result_7 = call i48 @llvm.part.set.i48.i32(i48 %p_Val2_2, i32 %tmp_13, i32 16, i32 47)" [ethernet_axi.cpp:75]   --->   Operation 123 'partset' 'p_Result_7' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 1)> <Delay = 0.00>
ST_11 : Operation 124 [1/1] (0.83ns)   --->   "store i48 %p_Result_7, i48* @src_address_V, align 8" [ethernet_axi.cpp:75]   --->   Operation 124 'store' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 1)> <Delay = 0.83>
ST_11 : Operation 125 [1/1] (0.00ns)   --->   "%tmp_12 = trunc i64 %tmp_data_V_1 to i48" [ethernet_axi.cpp:67]   --->   Operation 125 'trunc' 'tmp_12' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 0)> <Delay = 0.00>
ST_11 : Operation 126 [1/1] (0.00ns)   --->   "store i48 %tmp_12, i48* @dest_address_V, align 8" [ethernet_axi.cpp:67]   --->   Operation 126 'store' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 0)> <Delay = 0.00>
ST_11 : Operation 127 [1/1] (0.00ns)   --->   "%p_Result_6 = call i16 @_ssdm_op_PartSelect.i16.i64.i32.i32(i64 %tmp_data_V_1, i32 48, i32 63)" [ethernet_axi.cpp:68]   --->   Operation 127 'partselect' 'p_Result_6' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 0)> <Delay = 0.00>
ST_11 : Operation 128 [1/1] (0.00ns)   --->   "%p_Result_5 = call i48 @llvm.part.set.i48.i16(i48 %p_Val2_2, i16 %p_Result_6, i32 0, i32 15)" [ethernet_axi.cpp:68]   --->   Operation 128 'partset' 'p_Result_5' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 0)> <Delay = 0.00>
ST_11 : Operation 129 [1/1] (0.83ns)   --->   "store i48 %p_Result_5, i48* @src_address_V, align 8" [ethernet_axi.cpp:68]   --->   Operation 129 'store' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 0)> <Delay = 0.83>
ST_11 : Operation 130 [5/5] (1.70ns)   --->   "%mem_V_addr_3_resp = call i1 @_ssdm_op_WriteResp.m_axi.i64P(i64* %mem_V_addr_3)" [ethernet_axi.cpp:105]   --->   Operation 130 'writeresp' 'mem_V_addr_3_resp' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 3 & !or_cond)> <Delay = 1.70> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_11 : Operation 131 [1/1] (0.00ns)   --->   "%axi_address_V_load = load i32* @axi_address_V, align 4" [ethernet_axi.cpp:145]   --->   Operation 131 'load' 'axi_address_V_load' <Predicate = (fsm_state_V_load & t_V == 2)> <Delay = 0.00>
ST_11 : Operation 132 [1/1] (0.00ns)   --->   "%axi_len_V_load = load i9* @axi_len_V, align 2" [ethernet_axi.cpp:146]   --->   Operation 132 'load' 'axi_len_V_load' <Predicate = (fsm_state_V_load & t_V == 2)> <Delay = 0.00>
ST_11 : Operation 133 [1/1] (0.00ns)   --->   "%p_Result_3 = call i64 @_ssdm_op_BitConcatenate.i64.i23.i9.i32(i23 0, i9 %axi_len_V_load, i32 %axi_address_V_load)" [ethernet_axi.cpp:147]   --->   Operation 133 'bitconcatenate' 'p_Result_3' <Predicate = (fsm_state_V_load & t_V == 2)> <Delay = 0.00>
ST_11 : Operation 134 [1/1] (1.08ns)   --->   "br label %17" [ethernet_axi.cpp:151]   --->   Operation 134 'br' <Predicate = (fsm_state_V_load & t_V == 2)> <Delay = 1.08>
ST_11 : Operation 135 [1/1] (0.00ns)   --->   "%p_Result_1 = call i32 @_ssdm_op_PartSelect.i32.i48.i32.i32(i48 %p_Val2_s, i32 16, i32 47)" [ethernet_axi.cpp:134]   --->   Operation 135 'partselect' 'p_Result_1' <Predicate = (fsm_state_V_load & t_V == 1)> <Delay = 0.00>
ST_11 : Operation 136 [1/1] (0.00ns)   --->   "%mac_type_V_load = load i16* @mac_type_V, align 2" [ethernet_axi.cpp:135]   --->   Operation 136 'load' 'mac_type_V_load' <Predicate = (fsm_state_V_load & t_V == 1)> <Delay = 0.00>
ST_11 : Operation 137 [1/1] (0.00ns)   --->   "%ethernet_axi_id_V_lo = load i8* @ethernet_axi_id_V, align 1" [ethernet_axi.cpp:136]   --->   Operation 137 'load' 'ethernet_axi_id_V_lo' <Predicate = (fsm_state_V_load & t_V == 1)> <Delay = 0.00>
ST_11 : Operation 138 [1/1] (0.00ns)   --->   "%p_Result_2 = call i64 @_ssdm_op_BitConcatenate.i64.i8.i8.i16.i32(i8 %axi_command_V_load, i8 %ethernet_axi_id_V_lo, i16 %mac_type_V_load, i32 %p_Result_1)" [ethernet_axi.cpp:137]   --->   Operation 138 'bitconcatenate' 'p_Result_2' <Predicate = (fsm_state_V_load & t_V == 1)> <Delay = 0.00>
ST_11 : Operation 139 [1/1] (1.08ns)   --->   "br label %17" [ethernet_axi.cpp:141]   --->   Operation 139 'br' <Predicate = (fsm_state_V_load & t_V == 1)> <Delay = 1.08>
ST_11 : Operation 140 [1/1] (0.00ns)   --->   "%tmp_10 = trunc i48 %p_Val2_s to i16" [ethernet_axi.cpp:126]   --->   Operation 140 'trunc' 'tmp_10' <Predicate = (fsm_state_V_load & t_V == 0)> <Delay = 0.00>
ST_11 : Operation 141 [1/1] (0.00ns)   --->   "%p_Result_s_15 = call i64 @_ssdm_op_BitConcatenate.i64.i16.i48(i16 %tmp_10, i48 %p_Val2_2)" [ethernet_axi.cpp:126]   --->   Operation 141 'bitconcatenate' 'p_Result_s_15' <Predicate = (fsm_state_V_load & t_V == 0)> <Delay = 0.00>
ST_11 : Operation 142 [1/1] (1.08ns)   --->   "br label %17" [ethernet_axi.cpp:130]   --->   Operation 142 'br' <Predicate = (fsm_state_V_load & t_V == 0)> <Delay = 1.08>
ST_11 : Operation 143 [1/1] (1.08ns)   --->   "br label %17" [ethernet_axi.cpp:162]   --->   Operation 143 'br' <Predicate = (fsm_state_V_load & t_V == 3 & tmp_5 & !tmp_s)> <Delay = 1.08>
ST_11 : Operation 144 [1/1] (0.00ns)   --->   "%p_Val2_3 = phi i64 [ %p_Result_4, %.critedge ], [ %p_Result_12, %._crit_edge853 ]"   --->   Operation 144 'phi' 'p_Val2_3' <Predicate = (fsm_state_V_load & t_V == 3 & tmp_s) | (fsm_state_V_load & t_V == 3 & !tmp_5)> <Delay = 0.00>
ST_11 : Operation 145 [1/1] (0.00ns)   --->   "%p_Result_13 = call i64 @llvm.part.set.i64.i32(i64 %p_Val2_3, i32 -559038737, i32 32, i32 63)" [ethernet_axi.cpp:173]   --->   Operation 145 'partset' 'p_Result_13' <Predicate = (fsm_state_V_load & t_V == 3 & tmp_s) | (fsm_state_V_load & t_V == 3 & !tmp_5)> <Delay = 0.00>
ST_11 : Operation 146 [1/1] (1.08ns)   --->   "br label %17"   --->   Operation 146 'br' <Predicate = (fsm_state_V_load & t_V == 3 & tmp_s) | (fsm_state_V_load & t_V == 3 & !tmp_5)> <Delay = 1.08>

State 12 <SV = 11> <Delay = 1.70>
ST_12 : Operation 147 [4/5] (1.70ns)   --->   "%mem_V_addr_3_resp = call i1 @_ssdm_op_WriteResp.m_axi.i64P(i64* %mem_V_addr_3)" [ethernet_axi.cpp:105]   --->   Operation 147 'writeresp' 'mem_V_addr_3_resp' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 3 & !or_cond)> <Delay = 1.70> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_12 : Operation 148 [1/1] (0.00ns)   --->   "%tmp_data_V = phi i64 [ %p_Result_3, %12 ], [ %p_Result_2, %11 ], [ %p_Result_s_15, %10 ], [ %p_Result_13, %16 ], [ %mem_V_addr_2_read, %15 ]"   --->   Operation 148 'phi' 'tmp_data_V' <Predicate = (fsm_state_V_load)> <Delay = 0.00>

State 13 <SV = 12> <Delay = 1.70>
ST_13 : Operation 149 [3/5] (1.70ns)   --->   "%mem_V_addr_3_resp = call i1 @_ssdm_op_WriteResp.m_axi.i64P(i64* %mem_V_addr_3)" [ethernet_axi.cpp:105]   --->   Operation 149 'writeresp' 'mem_V_addr_3_resp' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 3 & !or_cond)> <Delay = 1.70> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 14 <SV = 13> <Delay = 1.70>
ST_14 : Operation 150 [2/5] (1.70ns)   --->   "%mem_V_addr_3_resp = call i1 @_ssdm_op_WriteResp.m_axi.i64P(i64* %mem_V_addr_3)" [ethernet_axi.cpp:105]   --->   Operation 150 'writeresp' 'mem_V_addr_3_resp' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 3 & !or_cond)> <Delay = 1.70> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_14 : Operation 151 [1/1] (0.00ns)   --->   "%tmp_last_V_1 = phi i1 [ false, %12 ], [ false, %11 ], [ false, %10 ], [ true, %16 ], [ false, %15 ]"   --->   Operation 151 'phi' 'tmp_last_V_1' <Predicate = (fsm_state_V_load)> <Delay = 0.00>
ST_14 : Operation 152 [2/2] (0.00ns)   --->   "call void @_ssdm_op_Write.axis.volatile.i64P.i8P.i1P(i64* %data_out_V_data_V, i8* %data_out_V_keep_V, i1* %data_out_V_last_V, i64 %tmp_data_V, i8 -1, i1 %tmp_last_V_1)" [ethernet_axi.cpp:183]   --->   Operation 152 'write' <Predicate = (fsm_state_V_load)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >

State 15 <SV = 14> <Delay = 1.70>
ST_15 : Operation 153 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i64* %data_in_V_data_V), !map !108"   --->   Operation 153 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_15 : Operation 154 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i8* %data_in_V_keep_V), !map !112"   --->   Operation 154 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_15 : Operation 155 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1* %data_in_V_last_V), !map !116"   --->   Operation 155 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_15 : Operation 156 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i64* %data_out_V_data_V), !map !120"   --->   Operation 156 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_15 : Operation 157 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i8* %data_out_V_keep_V), !map !124"   --->   Operation 157 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_15 : Operation 158 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1* %data_out_V_last_V), !map !128"   --->   Operation 158 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_15 : Operation 159 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i64* %mem_V), !map !132"   --->   Operation 159 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_15 : Operation 160 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecTopModule([13 x i8]* @ethernet_axi_str) nounwind"   --->   Operation 160 'spectopmodule' <Predicate = true> <Delay = 0.00>
ST_15 : Operation 161 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 2, i32 1, i32 0, [1 x i8]* @p_str) nounwind" [ethernet_axi.cpp:30]   --->   Operation 161 'specpipeline' <Predicate = true> <Delay = 0.00>
ST_15 : Operation 162 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32 0, [13 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str) nounwind" [ethernet_axi.cpp:31]   --->   Operation 162 'specinterface' <Predicate = true> <Delay = 0.00>
ST_15 : Operation 163 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i64* %data_in_V_data_V, i8* %data_in_V_keep_V, i1* %data_in_V_last_V, [5 x i8]* @p_str2, i32 1, i32 1, [5 x i8]* @p_str3, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str) nounwind" [ethernet_axi.cpp:32]   --->   Operation 163 'specinterface' <Predicate = true> <Delay = 0.00>
ST_15 : Operation 164 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i64* %data_out_V_data_V, i8* %data_out_V_keep_V, i1* %data_out_V_last_V, [5 x i8]* @p_str2, i32 1, i32 1, [5 x i8]* @p_str3, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str) nounwind" [ethernet_axi.cpp:33]   --->   Operation 164 'specinterface' <Predicate = true> <Delay = 0.00>
ST_15 : Operation 165 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i64* %mem_V, [6 x i8]* @p_str4, i32 0, i32 0, [1 x i8]* @p_str, i32 0, i32 65536, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 16, i32 16, i32 16, i32 16, [1 x i8]* @p_str, [1 x i8]* @p_str) nounwind" [ethernet_axi.cpp:34]   --->   Operation 165 'specinterface' <Predicate = true> <Delay = 0.00>
ST_15 : Operation 166 [1/5] (1.70ns)   --->   "%mem_V_addr_3_resp = call i1 @_ssdm_op_WriteResp.m_axi.i64P(i64* %mem_V_addr_3)" [ethernet_axi.cpp:105]   --->   Operation 166 'writeresp' 'mem_V_addr_3_resp' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 3 & !or_cond)> <Delay = 1.70> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_15 : Operation 167 [1/1] (0.00ns)   --->   "br label %._crit_edge850" [ethernet_axi.cpp:109]   --->   Operation 167 'br' <Predicate = (!fsm_state_V_load & tmp & t_V_1 == 3 & !or_cond)> <Delay = 0.00>
ST_15 : Operation 168 [1/1] (0.00ns)   --->   "br label %._crit_edge852.new"   --->   Operation 168 'br' <Predicate = (!fsm_state_V_load & tmp & word_count_V_flag_1)> <Delay = 0.00>
ST_15 : Operation 169 [1/1] (0.00ns)   --->   "br label %._crit_edge849" [ethernet_axi.cpp:117]   --->   Operation 169 'br' <Predicate = (!fsm_state_V_load & tmp)> <Delay = 0.00>
ST_15 : Operation 170 [1/1] (0.00ns)   --->   "br label %._crit_edge848" [ethernet_axi.cpp:118]   --->   Operation 170 'br' <Predicate = (!fsm_state_V_load)> <Delay = 0.00>
ST_15 : Operation 171 [1/2] (0.00ns)   --->   "call void @_ssdm_op_Write.axis.volatile.i64P.i8P.i1P(i64* %data_out_V_data_V, i8* %data_out_V_keep_V, i1* %data_out_V_last_V, i64 %tmp_data_V, i8 -1, i1 %tmp_last_V_1)" [ethernet_axi.cpp:183]   --->   Operation 171 'write' <Predicate = (fsm_state_V_load)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_15 : Operation 172 [1/1] (0.00ns)   --->   "br label %._crit_edge848" [ethernet_axi.cpp:184]   --->   Operation 172 'br' <Predicate = (fsm_state_V_load)> <Delay = 0.00>
ST_15 : Operation 173 [1/1] (0.00ns)   --->   "ret void" [ethernet_axi.cpp:186]   --->   Operation 173 'ret' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 2ns, clock uncertainty: 0.3ns.

 <State 1>: 2.14ns
The critical path consists of the following:
	'load' operation ('t.V', ethernet_axi.cpp:156) on static variable 'read_len_V' [39]  (0 ns)
	'add' operation ('tmp_3', ethernet_axi.cpp:161) [160]  (1.3 ns)
	'store' operation (ethernet_axi.cpp:161) of variable 'tmp_3', ethernet_axi.cpp:161 on static variable 'read_len_V' [161]  (0.835 ns)

 <State 2>: 2.32ns
The critical path consists of the following:
	'load' operation ('t.V', ethernet_axi.cpp:157) on static variable 'read_address_V' [153]  (0 ns)
	'add' operation ('tmp_2', ethernet_axi.cpp:160) [158]  (1.49 ns)
	'store' operation (ethernet_axi.cpp:160) of variable 'tmp_2', ethernet_axi.cpp:160 on static variable 'read_address_V' [159]  (0.835 ns)

 <State 3>: 1.7ns
The critical path consists of the following:
	bus request on port 'mem_V' (ethernet_axi.cpp:168) [144]  (1.7 ns)

 <State 4>: 1.7ns
The critical path consists of the following:
	bus request on port 'mem_V' (ethernet_axi.cpp:168) [144]  (1.7 ns)

 <State 5>: 1.7ns
The critical path consists of the following:
	bus request on port 'mem_V' (ethernet_axi.cpp:168) [144]  (1.7 ns)

 <State 6>: 1.7ns
The critical path consists of the following:
	bus request on port 'mem_V' (ethernet_axi.cpp:168) [144]  (1.7 ns)

 <State 7>: 1.7ns
The critical path consists of the following:
	bus request on port 'mem_V' (ethernet_axi.cpp:168) [144]  (1.7 ns)

 <State 8>: 2.32ns
The critical path consists of the following:
	'load' operation ('t.V', ethernet_axi.cpp:105) on static variable 'write_address_V' [87]  (0 ns)
	'add' operation ('tmp_6', ethernet_axi.cpp:107) [93]  (1.49 ns)
	'store' operation (ethernet_axi.cpp:107) of variable 'tmp_6', ethernet_axi.cpp:107 on static variable 'write_address_V' [94]  (0.835 ns)

 <State 9>: 1.7ns
The critical path consists of the following:
	'getelementptr' operation ('mem_V_addr_3', ethernet_axi.cpp:105) [89]  (0 ns)
	bus request on port 'mem_V' (ethernet_axi.cpp:105) [90]  (1.7 ns)

 <State 10>: 1.7ns
The critical path consists of the following:
	bus write on port 'mem_V' (ethernet_axi.cpp:105) [91]  (1.7 ns)

 <State 11>: 1.7ns
The critical path consists of the following:
	bus access on port 'mem_V' (ethernet_axi.cpp:105) [92]  (1.7 ns)

 <State 12>: 1.7ns
The critical path consists of the following:
	bus access on port 'mem_V' (ethernet_axi.cpp:105) [92]  (1.7 ns)

 <State 13>: 1.7ns
The critical path consists of the following:
	bus access on port 'mem_V' (ethernet_axi.cpp:105) [92]  (1.7 ns)

 <State 14>: 1.7ns
The critical path consists of the following:
	bus access on port 'mem_V' (ethernet_axi.cpp:105) [92]  (1.7 ns)

 <State 15>: 1.7ns
The critical path consists of the following:
	bus access on port 'mem_V' (ethernet_axi.cpp:105) [92]  (1.7 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
